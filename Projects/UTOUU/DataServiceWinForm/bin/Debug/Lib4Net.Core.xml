<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lib4Net.Core</name>
    </assembly>
    <members>
        <member name="T:Lib4Net.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Lib4Net.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Lib4Net.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Lib4Net.Resource.Lib4NetLog">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            
            &lt;Lib4NetLog&gt;
              
              &lt;!--&lt;Appender name=&quot;FileAppender&quot; level=&quot;All&quot; 
                        type=&quot;Lib4Net.Logs.Appenders.FileAppender&quot;&gt;
                &lt;param name=&quot;File&quot; value=&quot;c:\lib4netlog\%sr\%date.log&quot;/&gt;
                &lt;param name=&quot;DateFormat&quot; value=&quot;YYYYMMddhhmmss&quot;/&gt;   
                &lt;param name=&quot;MaxFileSize&quot; value=&quot;1M&quot;/&gt;
                &lt;layouts&gt;
                  &lt;layout level=&quot;Debug&quot;&gt;[%yy-%mm-%dd %h:%mi:%s][%sr] %message%br&lt;/layout&gt;
                  &lt;layout level=&quot;Info&quot;&gt;[%yy-%mm-%dd %h:%mi:%s][%sr] %message%br&lt;/layout&gt;
                &lt;/la [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Lib4Net.Resource.MysqlConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Sqls&gt;
              &lt;ParamName&gt;?&lt;/ParamName&gt;
              &lt;VagueFormat&gt;{0} like &apos;%?{1}%&apos;&lt;/VagueFormat&gt;
              &lt;ExactFormat&gt;[{0}]=?{1}&lt;/ExactFormat&gt;
              &lt;FieldSelectAs&gt;{0} {1}&lt;/FieldSelectAs&gt;
              &lt;TableSelectAs&gt;{0} {1}&lt;/TableSelectAs&gt;
              &lt;SelectCount&gt;SELECT COUNT(1) FROM {TN} {j} WHERE {C} {ORD}&lt;/SelectCount&gt;
              &lt;DeleteByPrimaryKey&gt;DELETE FROM [{TN}] WHERE [{PK}]={PF}{PK}&lt;/DeleteByPrimaryKey&gt;
              &lt;DeleteByCondtion&gt;DELETE FROM [{TN}] WHERE {C}&lt;/DeleteByCondtion&gt;
              &lt;DeleteByPrimaryKeys&gt;DELETE FR [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Lib4Net.Resource.OracleConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Sqls&gt;
              &lt;ParamName&gt;:&lt;/ParamName&gt;
              &lt;VagueFormat&gt;{0} like &apos;%&apos;||{1}||&apos;%&apos;&lt;/VagueFormat&gt;
              &lt;DefaultFormat&gt;default {0}&lt;/DefaultFormat&gt;
              &lt;ExactFormat&gt;{0}={1}&lt;/ExactFormat&gt;
              &lt;FieldSelectAs&gt;{0} {1}&lt;/FieldSelectAs&gt;
              &lt;TableSelectAs&gt;{0} {1}&lt;/TableSelectAs&gt;
              &lt;DbTimeFormat&gt;yyyy-MM-dd HH24:mi:ss&lt;/DbTimeFormat&gt;
              &lt;VagueParam&gt;{0}&lt;/VagueParam&gt;
              &lt;ExactParam&gt;{0}&lt;/ExactParam&gt;
              &lt;DateParams&gt;to_date({0},&apos;yyyy-MM-dd HH24:mi:ss&apos;)&lt;/DateParams&gt;
              &lt;RowId&gt;rowid&lt;/RowId&gt;
              &lt;Sele [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Lib4Net.Resource.SqlConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Sqls&gt;
              &lt;ParamName&gt;@&lt;/ParamName&gt;
              &lt;VagueFormat&gt;{0} like &apos;%@{1}%&apos;&lt;/VagueFormat&gt;
              &lt;ExactFormat&gt;[{0}]=@{1}&lt;/ExactFormat&gt;
              &lt;FieldSelectAs&gt;{0} {1}&lt;/FieldSelectAs&gt;
              &lt;TableSelectAs&gt;{0} {1}&lt;/TableSelectAs&gt;
              &lt;SelectCount&gt;SELECT COUNT(1) FROM {TN} {j} WHERE {C} {ORD}&lt;/SelectCount&gt;
              &lt;DeleteByPrimaryKey&gt;DELETE FROM [{TN}] WHERE [{PK}]={PF}{PK}&lt;/DeleteByPrimaryKey&gt;
              &lt;DeleteByCondtion&gt;DELETE FROM [{TN}] WHERE {C}&lt;/DeleteByCondtion&gt;
              &lt;DeleteByPrimaryKeys&gt;DELETE FR [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Lib4Net.Resource.SqliteConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;Sqls&gt;
              &lt;ParamName&gt;:&lt;/ParamName&gt;
              &lt;VagueFormat&gt;{0} like {1}&lt;/VagueFormat&gt;
              &lt;ExactFormat&gt;{0}={1}&lt;/ExactFormat&gt;
              &lt;VagueParam&gt;%{0}%&lt;/VagueParam&gt;
              &lt;ExactParam&gt;{0}&lt;/ExactParam&gt;
              &lt;DbTimeFormat&gt;yyyy-MM-dd HH:mm:ss&lt;/DbTimeFormat&gt;
              &lt;DateParams&gt;datetime({0})&lt;/DateParams&gt;
              &lt;DefaultFormat&gt;default({0})&lt;/DefaultFormat&gt;
              &lt;FieldSelectAs&gt;{0} {1}&lt;/FieldSelectAs&gt;
              &lt;TableSelectAs&gt;{0} {1}&lt;/TableSelectAs&gt;
              &lt;UseAlisWhenUpdate&gt;false&lt;/UseAlisWhenUpdate&gt;
              &lt;SelectCount&gt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Lib4Net.Resource.XmlConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;config&gt;
              &lt;table name=&quot;&quot;&gt;
                &lt;fields&gt;
                  &lt;field pname=&quot;&quot; name=&quot;&quot; type=&quot;&quot; length=&quot;&quot; b2i=&quot;&quot; e2i=&quot;&quot; def=&quot;&quot;
                         isguid=&quot;&quot; ispk=&quot;&quot; isidentity=&quot;&quot; isdelete=&quot;&quot;
                         fname=&quot;&quot; fsname=&quot;&quot; ftble=&quot;&quot;
                         ftalias=&quot;&quot; jand=&quot;&quot; mtable=&quot;&quot; enable=&quot;&quot;
                         label=&quot;&quot;/&gt;   
                &lt;/fields&gt;
              &lt;/table&gt;
              &lt;template&gt;
                &lt;item name=&quot;&quot;&gt;
                  &lt;sql&gt;
                    &lt;![CDATA[
                      select t.partner_id,t.payer_account,t.order_request_time,
                         t. [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Lib4Net.Pool.IObjectFactory`1">
            <summary>
            缓存对象生成工厂
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lib4Net.Pool.IObjectFactory`1.CreateInstance">
            <summary>
            创建缓存对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectFactory`1.CreataeObjectSet">
            <summary>
            创建ObjectSet
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.Template.Expressions.FieldExpression.#ctor(Lib4Net.ORM.Template.Expressions.IContext)" -->
        <member name="T:Lib4Net.ORM.Verb`1">
            <summary>
            动词基类
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="F:Lib4Net.ORM.Verb`1._outputData">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.Verb`1._nextVerb">
            <summary>
            下一节点
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.IsCurrentCommand(System.String)">
            <summary>
            命令是否为当前动词对应的名称
            </summary>
            <param name="commandName">命令名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.SetNextVerb(Lib4Net.ORM.Verb{`0})">
            <summary>
            设置当前节的下一节点
            </summary>
            <param name="nextVerb">下一节点</param>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.GetNextVerb">
            <summary>
            获取当前节点的下一节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.GetVerb(System.String)">
            <summary>
            获取指定命令的下一链表节点
            </summary>
            <param name="commandName">指定命令的链表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.SendData(Lib4Net.ORM.VerbData{`0})">
            <summary>
            将数据按链表发送,至到最后一个链表
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Lib4Net.ORM.Verb`1.Execute(System.Object[])">
            <summary>
            执行当前操作
            </summary>
            <param name="args">操作参数</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.Verb`1.OutputData">
            <summary>
            执行成功后的输出数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Verb`1.Data">
            <summary>
            实体数据集
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Verb`1.NextVerb">
            <summary>
            下一个
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Verb`1.CommandName">
            <summary>
            当前命令名
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.ObjectDbMapTransfer">
            <summary>
            从类的属性和字段的属性中获取数据库配置信息
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="T:Lib4Net.ORM.IODMapTransfer">
            <summary>
            对象数据库转换
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.IODMapTransfer.Transform(System.Type,Lib4Net.ORM.ObjectDbMapConfig)">
            <summary>
            转换映射数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapTransfer.#ctor">
            <summary>
            初始化实体数据库映射转换
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapTransfer.GetBindField(System.Reflection.MemberInfo)">
            <summary>
            获取指定属性的数据属性
            </summary>
            <param name="propInfo">实体中的某个属性</param>      
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapTransfer.Transform(System.Type,Lib4Net.ORM.ObjectDbMapConfig)">
            <summary>
            转换
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Data.ExecutedArgs">
            <summary>
            执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.ExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Lib4Net.ORM.Data.ExecutedArgs.SqlData">
            <summary>
            SQL操作语句
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.CountExecutedArgs">
            <summary>
            获取条数执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.CountExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="count">条数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.CountExecutedArgs.Count">
            <summary>
            总条数
            </summary>
        </member>
        <member name="T:Lib4Net.IO.ConfigUtility">
            <summary>
            配置文件帮助类
            </summary>
        </member>
        <member name="M:Lib4Net.IO.ConfigUtility.GetAppSettings(System.String)">
            <summary>
            获取配置文件中AppSettings的值
            </summary>
            <param name="name">AppSettings的Name值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.ConfigUtility.IsDebug">
            <summary>
            获取配置文件中compilation debug="true"的值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.IO.PathUtility">
            <summary>
            路径管理，重命名，删除，修改，创建，合并等操作
            </summary>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.CreateDirectories(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            创建多级目录
            </summary>   
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetStartupPath">
            <summary>
            获取应用程序启动路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetRelativePath(System.String,System.String)">
            <summary>
            获取指定路径的相对路径
            </summary>
            <param name="strPath1">相对路径</param>
            <param name="strPath2">路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetRealPath(System.String)">
            <summary>
            获取文件的实际完整路径
            </summary>
            <param name="virtualPath">文件相对路径</param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.CombineUrl(System.String,System.String)">
            <summary>
            合拼URL地址和参数
            </summary>
            <param name="url">URL地址</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.CombineWebPath(System.String,System.String)">
            <summary>
            合并两个WEB路径
            </summary>
            <param name="startpath">当前应用的路径</param>
            <param name="virtualPath">相对于当前应用的相对路径</param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.Combine(System.String,System.String)">
            <summary>
            组合两个路径
            </summary>
            <param name="path1">路径1</param>
            <param name="path2">路径2</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetDirectoryName(System.String)">
            <summary>
            获取文件夹目录名称或文件的所在目录的名称
            </summary>
            <param name="path">文件或文件夹路径</param>
            <returns></returns>       
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetDirectoryPath(System.String)">
            <summary>
            获取当前目录的路径或文件所在目录的路径
            </summary>
            <param name="path"></param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetFileName(System.String)">
            <summary>
            获取文件名称,不包含扩展名
            </summary>
            <param name="filePath">文件路径</param>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetBin">
            <summary>
            获取当前运行程序的Bin目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetInvalidFileChars">
            <summary>
            获取不允许出现在文件名中的字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>           
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetSize(System.String)">
            <summary>
            获取当前文件的大小,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetFiles(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Lib4Net.IO.PathUtility.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.CreateDirectories(System.String)">
            <summary>
            创建文件夹,递归创建多层路径
            </summary>
            <param name="path">完整路径</param>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:Lib4Net.IO.PathUtility.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:Lib4Net.IO.PathUtility.Exists(System.String)">
            <summary>
            获取文件是否存在
            </summary>
            <param name="file">文件路径</param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.Delete(System.String)">
            <summary>
            删除文件或目录,指定文件夹路径或文件路径
            </summary>
            <param name="path">完整路径</param>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.ClearChildDirectories(System.String)">
            <summary>
            清空所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>      
        </member>
        <member name="M:Lib4Net.IO.PathUtility.ClearFileData(System.String)">
            <summary>
            清空文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Lib4Net.IO.PathUtility.ReName(System.String,System.String)">
            <summary>
            修改目录或文件的名称,指定旧文件名或目录名,新文件名或目录名
            </summary>
            <param name="oldFullName">源文件或目录路径</param>
            <param name="newName">目标文件或目录路径</param>       
        </member>
        <member name="M:Lib4Net.IO.PathUtility.Move(System.String,System.String)">
            <summary>
            移动文件或目录，指定旧文件名目录全名和新文件或目录全名
            </summary>
            <param name="oldFullName">源文件或目录路径</param>
            <param name="newPath">合名,新文件或目录路径</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.Xml.XmlUtility">
            <summary>
            XML帮助类
            </summary>
        </member>
        <member name="M:Lib4Net.Xml.XmlUtility.Load(System.String)">
            <summary>
            指定XML文档初始化
            </summary>
            <param name="xml">XML字符串</param>
        </member>
        <member name="M:Lib4Net.Xml.XmlUtility.SelectNodes(System.String)">
            <summary>
            指定XPATH查询符合条件的所有节点
            </summary>
            <param name="xpath">标准XPATH路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Xml.XmlUtility.SelectSingleNode(System.String)">
            <summary>
            指定XPATH查询符合条件的第一个节点
            </summary>
            <param name="xpath">标准XPATH路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Xml.XmlUtility.GetRoot">
            <summary>
            获取文档根接点
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.Pool.IObjectPool`1">
            <summary>
            缓存池管理
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.Get(System.String)">
            <summary>
            从指定名称的缓存池中获取一个可用对象
            </summary>
            <param name="name">缓存池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.Add(System.String,`0)">
            <summary>
            添加一个可用对象到指定名称的缓存池
            </summary>
            <param name="name">缓存池名称</param>
            <param name="poolable">添加对象</param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.Remove(System.String,`0)">
            <summary>
            从指定名称的缓存中移除一个对象
            </summary>
            <param name="name">缓存池名称</param>
            <param name="poolable">移除对象</param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.Remove(System.String)">
            <summary>
            移除指定名称的缓存池中的所有对象
            </summary>
            <param name="name">缓存池名称</param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.GetObjectSet(System.String)">
            <summary>
            获取对象管理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPool`1.Cleanup">
            <summary>
            清理未使用对象
            </summary>
        </member>
        <member name="P:Lib4Net.Pool.IObjectPool`1.Count">
            <summary>
            对象池个数
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.DataAccessObjects`1">
            <summary>
             数据访问对象
            </summary>
            <typeparam name="T">IEntity实现类</typeparam>
        </member>
        <member name="T:Lib4Net.ORM.IDataAccessObjects`1">
            <summary>
            基于实体的数据操作模型
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateDbProvider">
            <summary>
            根据当前使用的数据库连接信息，创建新的IDataBaseProvider实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateTable">
            <summary>
            根据表配置创建数据库表
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.IsExistTable">
            <summary>
            判断表是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Delete(System.String)">
            <summary>
            指定主健值，删除数据
            </summary>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetCount(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定SQL及条件的数据条数
            </summary>
            <param name="sql">自定义SQL语句</param>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetCount(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String)">
            <summary>
            指定WHERE语句，及参数列表获取数据条数
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>        
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetCount(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,`0)">
            <summary>
            指定WHERE语句，及参数列表获取数据条数
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>        
            <returns></returns>
            <param name="vo">参数实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetScalarByTemplate(System.String,`0)">
            <summary>
            根据模板执行操作,并返回第一行第一列数据
            </summary>
            <param name="xmlTemplateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetCount(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            指定SQL语句，及参数列表获取数据条数
            </summary>
            <param name="sql">查询SQL语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetCountSqlData(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,`0)">
            <summary>
            根据WHERE条件构建，获取数据条数操作的SQL操作语句
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetCount(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定实体作为条件的数据条数
            </summary>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Deletes(System.String)">
            <summary>
            指定多个主健值，批量删除数据
            </summary>
            <param name="ids">多个主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Deletes(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取 将实体数据作为条件的批量数据删除 的SqlCommand信息
            </summary>
            <param name="vo">实体数据</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">多个条件连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Delete(Lib4Net.DB.IDataAccessProvider,System.String)">
            <summary>
            指定主健值，删除数据
            </summary>
              <param name="provider">数据库提供程序</param>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Deletes(Lib4Net.DB.IDataAccessProvider,System.String)">
            <summary>
            指定主健值，删除数据
            </summary>
              <param name="provider">数据库提供程序</param>
            <param name="ids">多个主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Deletes(Lib4Net.DB.IDataAccessProvider,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取 将实体数据作为条件的批量数据删除 的SqlCommand信息
            </summary>
              <param name="provider">数据库提供程序</param>
            <param name="vo">实体数据</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">多个条件连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateNew(`0)">
            <summary>
            添加新数据
            </summary>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateNew(Lib4Net.DB.IDataAccessProvider,`0)">
            <summary>
            指定实体，新增数据
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateNew(System.String,`0)">
            <summary>
            添加新数据
            </summary>
            <param name="pkValue">主健值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.CreateNew(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            添加新数据
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="pkValue">主健值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Save(System.String,`0)">
            <summary>
            保存数据,当数据的主键不为空时为修改数据,否则为新增数据
            </summary>
            <param name="pkValue">主键值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Save(`0)">
            <summary>
            保存数据,当数据的主键不为空时为修改数据,否则为新增数据
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(System.String,`0)">
            <summary>
            修改指定主键作为条件的数据
            </summary>
            <param name="pkValue">主键值</param>
            <param name="vo">修改字段实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(`0)">
            <summary>
            指定主键值，修改实体
            </summary>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(`0,`0)">
            <summary>
            修改指定条件数据的所有字段
            </summary>
            <param name="set">待修改的数据字段</param>
            <param name="condtion">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,`0)">
            <summary>
             修改指定主键作为条件的数据
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="vo">修改字段实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            修改指定主键作为条件的数据
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="pkValue">主键值</param>
            <param name="vo">修改字段实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,`0,`0)">
            <summary>
            修改指定条件数据的所有字段
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="set">待修改的数据字段</param>
            <param name="condtion">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetData(System.String)">
            <summary>
            根据主健值查询单条数据
            </summary>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetData(Lib4Net.DB.IDataAccessProvider,System.String,System.Boolean)">
            <summary>
            获取单条数据
            </summary>
            <param name="provider">数据库操作提供程序</param>
            <param name="pkValue">主健值</param>
             <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList">
            <summary>
            获取所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            根据SQL及数据获取数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetSingleData(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(System.String,`0)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetSingleData(System.String,`0)">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据实体参数作为条件获取前N条数据，查询所有数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="topCount">指定数据条数</param>
            <param name="orderBy">排序条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据实体参数作为条件，查询所有数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetSingleData(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据SQL及数据获取单条数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet">
            <summary>
            查询所有数据集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            指定SQL语句，查询数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(System.String,`0)">
            <summary>
            指定SQL语句，查询数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSetByTemplate(System.String,`0)">
            <summary>
            指定模板查询数据集
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataListByTemplate(System.String,`0)">
            <summary>
            指定模板查询数据集
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据实体参数作为条件获取前N条数据，查询所有数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="topCount">指定数据条数</param>
            <param name="orderBy">排序条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetSingleDataByTemplate(System.String,`0)">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据实体参数作为条件，查询所有数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(Lib4Net.DB.IDataAccessProvider,`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,System.String,System.String)">
            <summary>
            根据传入参数，及WHERE条件，获取数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,System.String,System.String)">
            <summary>
            根据传入参数，及WHERE条件，获取数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataSet(Lib4Net.DB.IDataAccessProvider,`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(Lib4Net.DB.IDataAccessProvider,`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetDataList(Lib4Net.DB.IDataAccessProvider,`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerData(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            指定页大小及页索引，获取指定页数的分页数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">条件匹配模式</param>
            <param name="connectMode">条件连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerDataList(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            指定页大小及页索引，获取指定页数的分页数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">条件匹配模式</param>
            <param name="connectMode">条件连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerDataList(System.String,`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerDataList(System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            根据条件查询分页数据
            </summary>
            <param name="where">条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="parms">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerDataList(System.String,`0,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerData(System.String,`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary>
            <param name="where">查询条件</param>    
            <param name="vo">查询实体</param>  
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerData(System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            根据条件查询分页数据
            </summary>
            <param name="where">条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetPagerData(System.String,`0,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary>
            <param name="where">查询条件</param>   
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.ToDataList(System.Data.DataSet)">
            <summary>
            将指定DataSet转换成实体
            </summary>
            <param name="dataSet">DataSet</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.ToDataList(System.Data.DataTable)">
            <summary>
            将指定Table转换成实体
            </summary>
            <param name="table">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Execute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData[])">
            <summary>
            以事务方式批量执行SqlCommandData
            </summary>
            <param name="provider">数据库Provider</param>
            <param name="commands">多个SqlCommandData</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.Execute(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
             执行相应的SQL语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetCountExecuting(Lib4Net.ORM.Data.CountExecutingArgs)">
            <summary>
            调用获取数据条数操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetCountExecuted(Lib4Net.ORM.Data.CountExecutedArgs)">
            <summary>
            调用获取数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetCountExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行获取数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetCountSqlData(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetCountSqlData(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetCountSqlData(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             获取数据条数操作的SQL操作语句
            </summary>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetCountSqlData(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String)">
            <summary>
            根据WHERE条件构建，获取数据条数操作的SQL操作语句
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnDeleteExecuting(Lib4Net.ORM.Data.DeleteExecutingArgs)">
            <summary>
            调用Delete操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnDeleteExecuted(Lib4Net.ORM.Data.DeleteExecutedArgs)">
            <summary>
            调用Delete操作以后执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnDeleteExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行删除数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeDeleteSqlData(System.String)">
            <summary>
            根据主键构建数据删除语句
            </summary>
            <param name="pkValue">主键语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeDeleteSqlData(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据主键构建数据删除语句
            </summary>
            <param name="provider">数据操作提供程序</param>
            <param name="vo">条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetDataSetExecuting(Lib4Net.ORM.Data.DataSetExcutingArgs)">
            <summary>
            调用获取数据集操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetDataSetExecuted(Lib4Net.ORM.Data.DataSetExcutedArgs)">
            <summary>
            调用获取数据集操作以后执行
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetDataSqlData(System.String,System.Boolean)">
            <summary>
            根据主键值,构建查询SQL操作语句
            </summary>
            <param name="pkValue">主键值</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetDataSqlData(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">包含条件信息的实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetDataSqlData(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">包含条件信息的实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetScalarSqlData(System.String,`0)">
            <summary>
            构建获取指定条件的第一行，第一列的值的SqlCommandData
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="vo">查询条件实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetScalarSqlData(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            构建获取指定条件的第一行，第一列的值的SqlCommandData
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetScalarSqlData(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             构建指定条件的第一行，第一列的值的SqlCommandData
            </summary>
             <param name="field">字段名称</param>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetDataSetExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作,返回数据集
            </summary>
            <param name="provider">数据库操作提供程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetDataSetExecute(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作,返回数据集
            </summary>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnCreateNewExecuting(Lib4Net.ORM.Data.CreateNewExecutingArgs)">
            <summary>
            调用创建新数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnCreateNewExecuted(Lib4Net.ORM.Data.CreateNewExecutedArgs)">
            <summary>
            调用创建新数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnGetScalarExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行获取数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeInsertSqlData(`0)">
            <summary>
            根据实体构建新增数据SQL语句
            </summary>
            <param name="vo">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnCreateNewExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作语句进行新增操作,并返回影响的行数
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetDataSqlData(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="where">条件语句</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeGetDataSqlData(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">条件实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.AlterByTemplate(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            根据模板修改数据
            </summary>
            <param name="provider">数据库操作程序</param>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.AlterByTemplate(System.String,`0)">
            <summary>
            根据模板修改数据
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnUpdateExecuting(Lib4Net.ORM.Data.UpdateExecutingArgs)">
            <summary>
            调用Update操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnUpdateExecuted(Lib4Net.ORM.Data.UpdateExecutedArgs)">
            <summary>
            调用Update操作以后执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeUpdateSqlData(System.String,`0)">
            <summary>
            根据字段构建修改数据SQL操作语句
            </summary>
            <param name="pkValue">主键值(实体中包含主键值时,可为空)</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.MakeUpdateSqlData(`0,`0)">
            <summary>
            构建修改数据SQL操作语句
            </summary>
            <param name="set">修改的字段实体</param>
            <param name="condtion">条件字段实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.OnUpdateExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行数据修改操作
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetScalar(System.String,`0)">
            <summary>
            指定SQL及条件，获取第一行，第一列的值
            </summary>
            <param name="sql">自定义SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetScalar(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            指定SQL语句，获取第一行，第一列的值
            </summary>
            <param name="sql">查询SQL语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.GetScalar(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            指定字段及查询条件，获取第一行，第一列的值
            </summary>
            <param name="field">返回字段</param>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IDataAccessObjects`1.ToDictionary(System.Collections.Generic.List{`0})">
            <summary>
            指定指定的LIST转换成字典，将主键值作为字典的KEY
            </summary>
            <param name="list">数据列表</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.IDataAccessObjects`1.EmptyEntity">
            <summary>
            获取空实体
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IDataAccessObjects`1.DbProvider">
            <summary>
            数据库操作提供程序
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IDataAccessObjects`1.ModifyCommand">
            <summary>
            获取最后一次数据修改的SqlCommandData
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IDataAccessObjects`1.QueryCommand">
            <summary>
            获取最后一次数据查询的 SqlCommandData
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnCreateNewExecuting(Lib4Net.ORM.Data.CreateNewExecutingArgs)">
            <summary>
            调用创建新数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnCreateNewExecuted(Lib4Net.ORM.Data.CreateNewExecutedArgs)">
            <summary>
            调用创建新数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeInsertSqlData(`0)">
            <summary>
            根据实体构建新增数据SQL语句
            </summary>
            <param name="vo">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnCreateNewExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作语句进行新增操作,并返回影响的行数
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateNew(System.String,`0)">
            <summary>
            添加新数据
            </summary>
            <param name="pkValue">主健值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateNew(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            添加新数据
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="pkValue">主健值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateNew(`0)">
            <summary>
            添加新数据
            </summary>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateNew(Lib4Net.DB.IDataAccessProvider,`0)">
            <summary>
            使用指定的数据库程序，批量新增数据
            </summary>
            <param name="provider">数据库程序</param>
            <param name="vo">新增实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetDataSetExecuting(Lib4Net.ORM.Data.DataSetExcutingArgs)">
            <summary>
            调用获取数据集操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetDataSetExecuted(Lib4Net.ORM.Data.DataSetExcutedArgs)">
            <summary>
            调用获取数据集操作以后执行
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(System.String,System.Boolean)">
            <summary>
            根据主键值,构建查询SQL操作语句
            </summary>
            <param name="pkValue">主键值</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">包含条件信息的实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(`0,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="where">条件语句</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="where">条件语句</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">条件实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(System.String,`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="where">Where条件</param>
            <param name="vo">实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetDataSqlData(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            根据条件构建查询SQL操作语句
            </summary>
            <param name="vo">包含条件信息的实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetDataSetExecute(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作,返回数据集
            </summary>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet">
            <summary>
            查询所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetData(System.String)">
            <summary>
            获取单条数据
            </summary>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            获DataSet数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,System.String,System.String)">
            <summary>
            根据传入参数，及WHERE条件，获取数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(System.String,`0)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList">
            <summary>
            查询所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            查询指定条件数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(System.String,`0)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,System.String,System.String)">
            <summary>
            根据传入参数，及WHERE条件，获取数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataListByTemplate(System.String,`0)">
            <summary>
            根据模板获取数据集
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSetByTemplate(System.String,`0)">
            <summary>
            根据模板获取数据集
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetDataSetExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行SQL操作,返回数据集
            </summary>
            <param name="provider">数据库操作提供程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetData(Lib4Net.DB.IDataAccessProvider,System.String,System.Boolean)">
            <summary>
            获取单条数据
            </summary>
            <param name="provider">数据库操作提供程序</param>
            <param name="pkValue">主健值</param>
             <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(Lib4Net.DB.IDataAccessProvider,`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataSet(Lib4Net.DB.IDataAccessProvider,`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            获DataSet数据集
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(Lib4Net.DB.IDataAccessProvider,`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetDataList(Lib4Net.DB.IDataAccessProvider,`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询指定条件数据
            </summary>
            <param name="provider">数据库操作对象</param>
            <param name="vo">条件实体</param>
            <param name="topCount">数据条数</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnUpdateExecuting(Lib4Net.ORM.Data.UpdateExecutingArgs)">
            <summary>
            调用Update操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnUpdateExecuted(Lib4Net.ORM.Data.UpdateExecutedArgs)">
            <summary>
            调用Update操作以后执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeUpdateSqlData(System.String,`0)">
            <summary>
            根据字段构建修改数据SQL操作语句
            </summary>
            <param name="pkValue">主键值(实体中包含主键值时,可为空)</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeUpdateSqlData(`0,`0)">
            <summary>
            构建修改数据SQL操作语句
            </summary>
            <param name="set">修改的字段实体</param>
            <param name="condtion">条件字段实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnUpdateExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行数据修改操作
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,`0)">
            <summary>
            使用指定的数据库提供程序，修改数据
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="vo">修改数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            使用指定的数据库提供程序，修改数据
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="pkValue">实体的主健，该字段作为修改条件</param>
            <param name="vo">修改数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(System.String,`0)">
            <summary>
            指定主键值，修改实体
            </summary>
            <param name="pkValue">主键值</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(`0)">
            <summary>
            指定主键值，修改实体
            </summary>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(`0,`0)">
            <summary>
            指定指定实体修改数据
            </summary>
            <param name="set">数据实体，不空的字段为修改字段</param>
            <param name="condtion">条件实体，不空的字段为修改过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Update(Lib4Net.DB.IDataAccessProvider,`0,`0)">
            <summary>
            提供数据库操作程序，执行修改操作
            </summary>
            <param name="provider">数据库操作程序</param>
            <param name="set">生成修改语句的SET字段信息</param>
            <param name="condtion">生成修改语句的WHERE字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnDeleteExecuting(Lib4Net.ORM.Data.DeleteExecutingArgs)">
            <summary>
            调用Delete操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnDeleteExecuted(Lib4Net.ORM.Data.DeleteExecutedArgs)">
            <summary>
            调用Delete操作以后执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeDeleteSqlData(System.String)">
            <summary>
            根据主键构建数据删除语句
            </summary>
            <param name="pkValue">主键语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeDeleteSqlData(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据主键构建数据删除语句
            </summary>
            <param name="provider">数据操作提供程序</param>
            <param name="vo">条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnDeleteExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行删除数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Delete(System.String)">
            <summary>
            删除指定数据
            </summary>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Delete(Lib4Net.DB.IDataAccessProvider,System.String)">
            <summary>
            指定数据库程序，删除数据
            </summary>
            <param name="provider">数据库程序</param>
            <param name="pkValue">主健值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Deletes(System.String)">
            <summary>
            删除指定数据
            </summary>
            <param name="ids">多个主健值，以逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Deletes(Lib4Net.DB.IDataAccessProvider,System.String)">
            <summary>
             指定数据库程序，删除数据
            </summary>
            <param name="provider">数据库程序</param>
            <param name="ids">多个主健值，以逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Deletes(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            删除指定数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Deletes(Lib4Net.DB.IDataAccessProvider,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            指定数据库程序，批量删除数据
            </summary>
            <param name="provider">数据库程序</param>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetCountExecuting(Lib4Net.ORM.Data.CountExecutingArgs)">
            <summary>
            调用获取数据条数操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetCountExecuted(Lib4Net.ORM.Data.CountExecutedArgs)">
            <summary>
            调用获取数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetCountSqlData(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param> 
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetCountSqlData(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetCountSqlData(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String)">
            <summary>
            根据WHERE条件构建，获取数据条数操作的SQL操作语句
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetCountSqlData(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,`0)">
            <summary>
            根据WHERE条件构建，获取数据条数操作的SQL操作语句
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetCountSqlData(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             获取数据条数操作的SQL操作语句
            </summary>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetCountExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行获取数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetCount(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定SQL及条件的数据条数
            </summary>
            <param name="sql">自定义SQL语句</param>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetCount(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            指定SQL语句，及参数列表获取数据条数
            </summary>
            <param name="sql">查询SQL语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetCount(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String)">
            <summary>
            指定WHERE语句，及参数列表获取数据条数
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>        
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetCount(System.Collections.Generic.List{Lib4Net.DB.DbParameter},System.String,`0)">
            <summary>
            指定WHERE语句，及参数列表获取数据条数
            </summary>
            <param name="list">参数列表</param>
            <param name="where">WHERE条件</param>        
            <returns></returns>
            <param name="vo">参数实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetCount(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定实体作为条件的数据条数
            </summary>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="F:Lib4Net.ORM.DataAccessObjects`1.dbProvider">
            <summary>
            数据库提供程序
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.DataAccessObjects`1.sqlBuilder">
            <summary>
            SQL语句生成程序
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.DataAccessObjects`1.queryCommand">
            <summary>
            最近一次查询SqlCommandData
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.DataAccessObjects`1.modifyCommand">
            <summary>
            最近一次修改SqlCommandData
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.DataAccessObjects`1.tempObject">
            <summary>
            当前空实体
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.#ctor">
            <summary>
            根据实体的DataBaseConfig配置，初始化数据库信息,如果未配置则默认使用第一个连接字符串
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.Int32)">
            <summary>
            指定配置文件中连接字符串的索引号
            </summary>
            <param name="connIndex">连接字符串的索引号</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.Int32,System.Data.Common.DbProviderFactory)">
            <summary>
            指定配置文件中连接字符串的索引号
            </summary>
            <param name="connIndex">连接字符串的索引号</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.String,System.Data.Common.DbProviderFactory)" -->
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.DataAccessObjects`1.#ctor(System.String,System.String,System.Data.Common.DbProviderFactory)" -->
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateDbProvider">
            <summary>
            根据当前数据库连接信息，构建新的数据库提供程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.CreateTable">
            <summary>
            创建数据表
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.IsExistTable">
            <summary>
            判断表是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Save(System.String,`0)">
            <summary>
            保存数据,当数据的主键不为空时为修改数据,否则为新增数据
            </summary>
            <param name="pkValue">主键值</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Save(`0)">
            <summary>
            保存数据,当数据的主键不为空时为修改数据,否则为新增数据
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Execute(System.String,Lib4Net.DB.DbParameter[])">
             <summary>
            执行相应的SQL语句
             </summary>
             <param name="sql">SQL语句</param>
             <param name="paras">输入参数</param>
             <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.Execute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData[])">
            <summary>
            使用启动了事务的IDataBaseProvider执行操作
            </summary>
            <param name="provider">数据库IDataBaseProvider</param>
            <param name="commands">数据库命令</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.ExecuteByTransaction(Lib4Net.ORM.Data.SqlCommandData[])">
            <summary>
            使用事务执行多个SqlCommandData
            </summary>
            <param name="commands">SqlCommandData，包含SQL语句及输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.ToDataList(System.Data.DataSet)">
            <summary>
            将指定的dataSet数据，转换成实体
            </summary>
            <param name="dataSet">数据集</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.ToDictionary(System.Collections.Generic.List{`0})">
            <summary>
            指定指定的LIST转换成字典，将主键值作为字典的KEY
            </summary>
            <param name="list">数据列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.ToDataList(System.Data.DataTable)">
            <summary>
            将指定的Table数据，转换成实体
            </summary>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetSingleData(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            根据SQL及数据获取单条数据
            </summary>
            <param name="vo">实体条件</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetSingleData(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">输入参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetSingleData(System.String,`0)">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetSingleDataByTemplate(System.String,`0)">
            <summary>
            查询指定条件的单条数据
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetScalarExecuting(Lib4Net.ORM.Data.ScalarExecutingArgs)">
            <summary>
            调用获取数据条数操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetScalarExecuted(Lib4Net.ORM.Data.ScalarExecutedArgs)">
            <summary>
            调用获取数据操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetScalarSqlData(System.String,`0)">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="vo">查询条件实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetScalarSqlData(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取数据条数操作的SQL操作语句
            </summary>
            <param name="sql">SQL操作语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeGetScalarSqlData(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             获取数据条数操作的SQL操作语句
            </summary>
            <param name="field">字段名称</param>
            <param name="vo">查询条件实体</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnGetScalarExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行获取数据操作
            </summary>
            <param name="provider">数据操作程序</param>
            <param name="data">SQL操作数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.MakeTemplateData(System.String,`0)">
            <summary>
            创建基本模板的SqlCommandData
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetScalar(System.String,`0)">
            <summary>
            获取指定SQL及条件的数据条数
            </summary>
            <param name="sql">自定义SQL语句</param>
            <param name="vo">实体条件</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetScalar(System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            指定SQL语句，及参数列表获取数据条数
            </summary>
            <param name="sql">查询SQL语句</param>
            <param name="list">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetScalar(System.String,`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定实体作为条件的数据条数
            </summary>
            <param name="fields">返回字段</param>
            <param name="vo">实体条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetScalarByTemplate(System.String,`0)">
            <summary>
            根据模板获取一行一列值
            </summary>
            <param name="xmlTemplateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnAlterExecuting(Lib4Net.ORM.Data.AlterExecutingArgs)">
            <summary>
            调用Alter操作以前执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnAlterExecuted(Lib4Net.ORM.Data.AlterExecutedArgs)">
            <summary>
            调用Alter操作以后执行
            </summary>
            <param name="e">执行参数</param>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.OnAlterExecute(Lib4Net.DB.IDataAccessProvider,Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            执行数据修改操作
            </summary>
            <param name="provider">数据库提供程序</param>
            <param name="data">SQL操作语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.AlterByTemplate(Lib4Net.DB.IDataAccessProvider,System.String,`0)">
            <summary>
            根据模板修改数据
            </summary>
            <param name="provider">数据库操作程序</param>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.AlterByTemplate(System.String,`0)">
            <summary>
            根据模板修改数据
            </summary>
            <param name="templateName">模板名称</param>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerData(System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary>
            <param name="where">查询条件</param>    
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerData(System.String,`0,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary>
            <param name="where">查询条件</param>   
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerData(System.String,`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary>
            <param name="where">查询条件</param>    
            <param name="vo">查询实体</param>  
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerData(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
             根据Where条件,及相关参数,获取分页数据
            </summary> 
            <param name="vo">查询实体</param>  
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerData(System.String,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">每个条件匹配模式</param>
            <param name="connectMode">多个条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerDataList(System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerDataList(System.String,`0,System.Int32,System.Int32,System.String,System.Collections.Generic.List{Lib4Net.DB.DbParameter})">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="parms">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerDataList(System.String,`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取分页数据集
            </summary>
            <param name="where">查询条件</param>
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjects`1.GetPagerDataList(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取分页数据集
            </summary>
            <param name="vo">查询实体</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.DataAccessObjects`1.QueryCommand">
            <summary>
            最近一次查询命令
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataAccessObjects`1.EmptyEntity">
            <summary>
            获取当前空实体
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataAccessObjects`1.Builder">
            <summary>
            获取SQL生成程序
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataAccessObjects`1.DbProvider">
            <summary>
            获取当前数据库操作程序
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataAccessObjects`1.ModifyCommand">
            <summary>
            最近一次修改命令
            </summary>
        </member>
        <member name="M:Lib4Net.Data.KeyValue`2.#ctor(`0,`1)">
            <summary>
            指定键值对初始化数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:Lib4Net.Data.KeyValue`2.Key">
            <summary>
            获取键
            </summary>
        </member>
        <member name="P:Lib4Net.Data.KeyValue`2.Value">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:Lib4Net.Data.BaseKeyValues.Add(System.Object)">
            <summary>
            将任意对象的属值按键值对方式添加到当前列表
            </summary>
            <param name="obj">数据对象</param>
        </member>
        <member name="T:Lib4Net.ORM.Template.Verbs.DefField">
            <summary>
            表字段名
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Template.Verbs.Verb">
            <summary>
            
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.ISyntaxChecker.IsStartChar(System.Char)">
            <summary>
            是否是语法开始字
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISyntaxChecker.IsEndChar(System.Char)">
            <summary>
            是否是结束关闭字
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISyntaxChecker.CheckWord(System.String)">
            <summary>
            检查语法关键字是否正确
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISyntaxChecker.ConatinEndChar">
            <summary>
            是否包含结束关键字
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISyntaxChecker.IsEscapeSymbol(System.Char)">
            <summary>
            是否是转义符
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.ISqlTemplateConfig">
            <summary>
            SQL模板配置，提供用于SQL语句生成的模板信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.ParamPrefix">
            <summary>
            参数名称 如:@,:
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.DeleteByPrimaryKey">
            <summary>
            根据主键物理删除数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.DeleteByPrimaryKeys">
            <summary>
            根据多个主键值，删除数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.DeleteByCondtion">
            <summary>
            根据条件，删除数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.UpdateByPrimaryKey">
            <summary>
            根据主键修改数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.UpdateSetField">
            <summary>
            UPdate设计字段条件
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.UpdateCondtion">
            <summary>
            UPdate条件
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.UpdateByCondtion">
            <summary>
            根据条件修改数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.CreateNew">
            <summary>
            新增数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.SelectByCondition">
            <summary>
            查询数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.GetCountByCondtion">
            <summary>
            获取指定条件的数据条数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.GetPagerData">
            <summary>
            获取分页数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.GetData">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.SelectTopByCondtion">
            <summary>
            获取前N条数据
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.CreateTable">
            <summary>
            创建表
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.VagueFormat">
            <summary>
            模糊查询格式
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.ExactFormat">
            <summary>
            精确查询格式
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.TableExist">
            <summary>
            表是否存在的SQL
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.Indentity">
            <summary>
            自增长标识
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.SelectCount">
            <summary>
            查询条数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.FieldSelectAs">
            <summary>
            字段查询别名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.TableSelectAs">
            <summary>
            表查询别名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.Params">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ISqlTemplateConfig.RowId">
            <summary>
            行索引编号
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.AlterExecutingArgs">
            <summary>
            执行修改数据前参数
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.ExecutingArgs">
            <summary>
            执行前参数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Data.ExecutingArgs.SqlData">
            <summary>
            SQL操作语句
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Data.ExecutingArgs.Cancel">
            <summary>
            是否取消后面的操作
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.AlterExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
             初始化
            </summary>
            <param name="data">SQL操作语句</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.AlterExecutingArgs.Count">
            <summary>
            影响的行数,当取消操作时返回此值
            </summary>
        </member>
        <member name="T:Lib4Net.ILogger">
            <summary>
            日志组件统一用户接口
            </summary>
        </member>
        <member name="M:Lib4Net.ILogger.Debug(System.String)">
            <summary>
            输出调试信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Debug(System.String,System.Exception)">
            <summary>
            输出调试信息
            </summary>
            <param name="message">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Error(System.String)">
            <summary>
            输出错误信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Error(System.String,System.Exception)">
            <summary>
            输出错误信息
            </summary>
            <param name="message">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Fatal(System.String)">
            <summary>
            输出严重错误信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            输出严重错误信息
            </summary>
            <param name="message">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Info(System.String)">
            <summary>
            输出提示信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Info(System.String,System.Exception)">
            <summary>
            输出提示信息
            </summary>
            <param name="message">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Warn(System.String)">
            <summary>
            输出警告信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Lib4Net.ILogger.Warn(System.String,System.Exception)">
            <summary>
            输出警告信息
            </summary>
            <param name="message">信息</param>
            <param name="ex">异常信息</param>
        </member>
        <member name="P:Lib4Net.ILogger.SourceName">
            <summary>
            日志源
            </summary>
        </member>
        <member name="M:Lib4Net.Logs.Appenders.DbAppender.WriteData">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="T:Lib4Net.ServiceUtility">
            <summary>
            Windows服务控制操作类 系统服务启动 停止 继续
            </summary>    
        </member>
        <member name="F:Lib4Net.ServiceUtility._sc">
            <summary>
            windows服务控制类
            </summary>
        </member>
        <member name="M:Lib4Net.ServiceUtility.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceName">windows服务的名称，即ServiceInstaller类的ServiceName属性</param>
        </member>
        <member name="M:Lib4Net.ServiceUtility.#ctor(System.ServiceProcess.ServiceController)">
            <summary>
            构造函数
            </summary>
            <param name="serviceController">Windows服务控制类的实例</param>
        </member>
        <member name="M:Lib4Net.ServiceUtility.GetServices">
            <summary>
            获取本机操作系统的所有windows服务
            </summary>        
        </member>
        <member name="M:Lib4Net.ServiceUtility.Start">
            <summary>
            启动服务,启动时间为最多30秒，如果启动成功则返回true,否则返回false。
            </summary>        
        </member>
        <member name="M:Lib4Net.ServiceUtility.Stop">
            <summary>
            停止服务,停止时间为最多30秒,如果停止成功则返回true,否则返回false。
            </summary>        
        </member>
        <member name="M:Lib4Net.ServiceUtility.Close">
            <summary>
            断开与windows服务的连接,并释放所有资源。
            </summary>
        </member>
        <member name="M:Lib4Net.ServiceUtility.Pause">
            <summary>
            暂停服务,如果暂停成功则返回true,否则返回false。
            </summary>        
        </member>
        <member name="M:Lib4Net.ServiceUtility.Continue">
            <summary>
            服务暂停后，继续执行服务,如果继续执行成功则返回true,否则返回false。
            </summary>        
        </member>
        <member name="M:Lib4Net.ServiceUtility.SendCommand(System.Int32)">
            <summary>
            向windows服务发送命令
            </summary>
            <param name="command">自定义命令，必须是128到256之间的整数,与windows服务的OnCustomCommand事件的参数对应</param>
        </member>
        <member name="P:Lib4Net.ServiceUtility.ServiceController">
            <summary>
            获取windows服务控制类的实例
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.SyntaxParser">
            <summary>
            语法转换器
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SyntaxParser.Parser(System.String,Lib4Net.ORM.ISyntaxChecker)">
            <summary>
            解析字符串，输出为语法关键字集合
            </summary>
            <param name="keywrod">原字符串</param>
            <param name="sysntaxChecker">语法检查器</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IParser.Translate(System.String)">
            <summary>
            将字符串转换成语法集
            </summary>
            <param name="keyword">原文</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.OracleTemplateConfig">
            <summary>
            Oracle SQL模板
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.OracleTemplateConfig.#ctor">
            <summary>
            初始化Oracle SQL模板
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.DataAccessObjectsManager">
            <summary>
            提供DataAccessObjects缓存管理
            </summary>
        </member>
        <member name="T:Lib4Net.Singleton`1">
            <summary>
            实体类的单例
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Lib4Net.Singleton`1.Instance">
            <summary>
            获取实例
            </summary>     
        </member>
        <member name="M:Lib4Net.ORM.DataAccessObjectsManager.Resolve``1">
            <summary>
            获取指定类型的DataAccessObjects连接对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Data.DeleteExecutingArgs">
            <summary>
            执行删除操作前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.DeleteExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作语句</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.DeleteExecutingArgs.Count">
            <summary>
            影响的行数,当取消操作时返回的行数
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.DeleteExecutedArgs">
            <summary>
            删除操作执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.DeleteExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="count">影响的行数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.DeleteExecutedArgs.Count">
            <summary>
            影响的行数
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.AlterExecutedArgs">
            <summary>
            执行修改数据操作后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.AlterExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="count">影响的行数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.AlterExecutedArgs.Count">
            <summary>
            影响的行数
            </summary>
        </member>
        <member name="M:Lib4Net.Logs.Verbs.Verb.IsCurrentCommand(System.String)">
            <summary>
            命令是否为当前动词对应的名称
            </summary>
            <param name="commandName">命令名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Logs.Verbs.Verb.SetNextChain(Lib4Net.Logs.Verbs.Verb)">
            <summary>
            设置当前节的下一链接
            </summary>
            <param name="nextchain"></param>
        </member>
        <member name="P:Lib4Net.Logs.Verbs.Verb.OutputData">
            <summary>
            执行成功后的输出数据
            </summary>
        </member>
        <member name="P:Lib4Net.Logs.Verbs.Verb.Data">
            <summary>
            实体数据集
            </summary>
        </member>
        <member name="P:Lib4Net.Logs.Verbs.Verb.NextChain">
            <summary>
            下一个
            </summary>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.Serialize``1(System.String,``0)">
            <summary>
            将指定文件序列化为XML文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="file">文件路径</param>   
            <param name="vo">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.Serialize``1(``0)">
            <summary>
            将对象序列化为XML字符串的byte数组
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="vo">对象</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.SerializeToString``1(``0)">
            <summary>
            序列化为字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="vo">对象</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.Deserialize``1(System.String,System.Text.Encoding)">
            <summary>
            将指定的二进制数据转化为特定对象(必须是XML字符串)
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="buffer">XML数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.Deserialize``1(System.Byte[])">
            <summary>
            将指定的二进制数据转化为特定对象(必须是XML字符串)
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="buffer">XML数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            将二进制数据文件反序列化为实体
            </summary>
            <param name="file">文件路径</param>     
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.SyntaxResolveChecker">
            <summary>
            分词检查器规则
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.FieldConfig">
            <summary>
            设置当前属性的数据库字段映射信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor">
            <summary>
            默认方式构建
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.String)">
            <summary>
            设置简单类型字段信息
            </summary>
            <param name="fieldName">数据库字段名称</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.String,System.String)">
            <summary>
            设置数据库参数
            </summary>
            <param name="dbType">字段类型</param>
            <param name="length">字段长度</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            设置数据库参数
            </summary>
            <param name="dbType">字段类型</param>
            <param name="length">字段长度</param>
            <param name="allowNull">是否为空</param>      
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            设置数据库参数
            </summary>
            <param name="dbType">字段类型</param>
            <param name="length">字段长度</param>
            <param name="allowNull">是否为空</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.Boolean)">
            <summary>
            设置主键信息,当查询或删除单条数据时指定的主键条件
            </summary>
            <param name="isPkFiled">是否是主键</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.Boolean,System.Int32)">
            <summary>
            设置自动增长标识，该字段将自动标识为主键
            </summary>
            <param name="isIdentity">是否自动增长(数据库支持，则该值无效)</param>
            <param name="min">自动增加最小值(数据库支持，则该值无效)</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.#ctor(System.String,System.String,System.String,Lib4Net.ORM.TableJoinType)">
            <summary>
            设置当前字段作为外键信息时的相关表信息。
            </summary>
            <param name="jointTable">当前字段为外键时,对应的主表名称如:Department D</param>
            <param name="joinFieldName">当前字段为外键时,对应主表的主键名称如:D.Id 或 Id</param>
            <param name="mainTableFileName">当前字段为非主表字段时,对应主表的ID字段</param>   
            <param name="jointype">表关联类型</param>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.HasJoint">
            <summary>
            是否具有关联表配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.FieldConfig.GetJoinTableAlias">
            <summary>
            获取关连表的别名
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.GetValueBySelect">
            <summary>
            获取或设置用于生成当前字段值的SQL语句，
            仅当FieldBuildType等于FieldBuildType.ProgrammingAutoCode时有效
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.Name">
            <summary>
            对应数据表的字段名称,一般用于除查询外的其它字段名称
            </summary>       
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.Label">
            <summary>
            字符标签名，中文名字
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.Alias">
             <summary>
            查询字段的别名
             </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.DbType">
            <summary>
            对应数据表字段的类型
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.AllowNull">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IndentityMinValue">
            <summary>
            自动增加最小值，某些数据库可能不支持
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.FieldBuildType">
            <summary>
            字段值生成模式
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinAnd">
            <summary>
            用于连接关联表查询时多个条件
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinType">
            <summary>
            字段关连表类型
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.DbLength">
            <summary>
            对应数据库字段的长度
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsJoinName">
            <summary>
            是否是关联表名称字段
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinFieldName">
            <summary>
            [关联表配置],关连表的字段名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.MainTableFieldName">
             <summary>
            [关联表配置],主表的字段表
             </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinTableName">
            <summary>
            [关联表配置],主表表名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinSelectFieldName">
            <summary>
            关联表查询字段
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.JoinTableAlias">
            <summary>
            [关联表配置]，关联表的别名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsGuidField">
            <summary>
            当前字段是否为Guid列,当设置为Ture新增数据时,未指定字段值时系统将自动创建值
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsPkField">
            <summary>
            当前字段是否是主键
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsIdentityField">
            <summary>
            当前字段是否是种子标识,当指定为种子标识量时不能插入或修改该字段的值
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.BoolToInt">
            <summary>
            将Bool类型转换成整数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.EnumAsInt">
            <summary>
            将枚举类型转化成整数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsDeleteField">
            <summary>
            是否是数据删除字段, True:将当前字段作为逻辑删除字段,
            执行数据删除操作时将数据的当前字段值置为true。
            False:取消当前字段作为逻辑字段
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.NotContained">
             <summary>
            不被包含的字段,数据库操作将忽略此字段
             </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.AutoCutString">
            <summary>
            当字符串长度超过限制长度时，是否自动截取
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.FieldConfig.IsSpecialField">
            <summary>
            是否是特殊字段
            </summary>
        </member>
        <member name="T:Lib4Net.Net.FtpClient">
            <summary>
            FTP客户端
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="remoteHost">FTP服务器IP地址</param>
            <param name="remotePath">当前服务器目录</param>
            <param name="remoteUser">登录用户账号</param>
            <param name="remotePass">登录用户密码</param>
            <param name="remotePort">FTP服务器端口</param>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strRemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strRemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strRemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strRemoteUser">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strRemotePass">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.bConnected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Connect">
            <summary>
            建立连接 
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.SetTransferType(Lib4Net.Net.FtpClient.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Dir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Get(System.String,System.String,System.String)">
            <summary>
            下载目录
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.GetFile(System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.GetBrokenFile(System.String,System.String,System.String,System.Int64)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.MkDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.RmDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.ChDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.socketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:Lib4Net.Net.FtpClient.GB2312">
            <summary>
            编码方式(为防止出现中文乱码采用 GB2312编码方式)
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg
            应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.CreateDataSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:Lib4Net.Net.FtpClient.SendCommand(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="strCommand">命令</param>
        </member>
        <member name="T:Lib4Net.Net.FtpClient.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="T:Lib4Net.SysUtility">
            <summary>
            计算机数据操作类
            </summary>
        </member>
        <member name="M:Lib4Net.SysUtility.DoExitWindows(System.Int32)">
            <summary>
            执行机算机操作
            </summary>
            <param name="flg">标志</param>
        </member>
        <member name="M:Lib4Net.SysUtility.GetCpuNo">
            <summary>
            获取CUP序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.SysUtility.GetLocalDiskNo">
            <summary>
            获取硬盘序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.SysUtility.GetMacAddress">
            <summary> 
            获取网卡硬件地址 
            </summary> 
            <returns> </returns> 
        </member>
        <member name="M:Lib4Net.SysUtility.Shutdown">
            <summary>
            关闭计算机
            </summary>
        </member>
        <member name="M:Lib4Net.SysUtility.ReBoot">
            <summary>
            重启计算机
            </summary>
        </member>
        <member name="M:Lib4Net.SysUtility.Logoff">
            <summary>
            注销计算机
            </summary>
        </member>
        <member name="M:Lib4Net.SysUtility.Exec(System.String)">
            <summary>
            执行命令
            </summary>
            <param name="command">命令名</param>
        </member>
        <member name="M:Lib4Net.SysUtility.StartInCommand(System.String,System.Int32)">
            <summary>
            执行命令行命令
            </summary>
            <param name="command">命令名称</param>
            <param name="args">命令名称</param>
        </member>
        <member name="M:Lib4Net.SysUtility.StartProcess(System.String,System.String,System.Boolean)">
            <summary>
            启动应用程序
            </summary>
            <param name="filename">程序路径</param>
            <param name="args">执行参数</param>
            <param name="show">是否显示进程</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.Configuration.ConifigSectionHandler`1">
            <summary>
            应用程序配置文件中配置的节点的处理程序
            </summary>
            <typeparam name="T">配置文件反序列化存储的对象</typeparam>
        </member>
        <member name="M:Lib4Net.Security.PemConverter.ConvertFromPemPublicKey(System.String)">
            <summary>
            将pem格式公钥转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem公钥内容</param>
            <returns>转换得到的RSAParamenters</returns>
        </member>
        <member name="M:Lib4Net.Security.PemConverter.ConvertFromPemPrivateKey(System.String)">
            <summary>
            将pem格式私钥转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem私钥内容</param>
            <returns>转换得到的RSAParamenters</returns>
        </member>
        <member name="T:Lib4Net.Security.DesHelper">
            <summary>
            标准的DES加解密,
            运算模式ECB
            填充模式PKCS7(java:PKCS5)
            </summary>
        </member>
        <member name="M:Lib4Net.Security.DesHelper.Encrypt(System.String,System.String,System.String)">
            <summary>
             DES加密字符串
            </summary>
            <param name="strKey">密钥</param>
            <param name="strData">原文</param>
            <returns></returns>       
        </member>
        <member name="M:Lib4Net.Security.DesHelper.Decrypt(System.String,System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="strData">密文</param>
            <param name="strKey">密钥</param>
            <returns></returns>      
        </member>
        <member name="T:Lib4Net.Xml.XmlNodes">
             <summary>
            XmlNodes节点集
             </summary>
        </member>
        <member name="M:Lib4Net.Xml.XmlNodes.#ctor(System.Xml.XmlNodeList)">
            <summary>
            指定标准XmlNodeList初始化
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="P:Lib4Net.ORM.Template.Matches.Variable.Name">
            <summary>
            获取或设置变量
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.Template.Expressions.OnlyValueExpression.#ctor(Lib4Net.ORM.Template.Expressions.IContext)" -->
        <member name="T:Lib4Net.ORM.SqlTranslation`1">
            <summary>
            SQL语句翻译器,将原字符串通过分词器转换提取语法关键字
            通过关键字链表解析为数据组
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Lib4Net.ORM.SqlTranslation`1.#ctor">
            <summary>
            初始化语法转换器
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqlTranslation`1.SendData(Lib4Net.ORM.VerbData{`0})">
            <summary>
            将数据发送到转换对象链表
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlTranslation`1.Translate(System.String)">
            <summary>
            输入指定的模板,分词进行转换
            </summary>
            <param name="sqltemplate">模板</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Data.FieldBuildType">
            <summary>
            字段生成方式
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.Data.FieldBuildType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.Data.FieldBuildType.ProgrammingAutoCode">
            <summary>
            程序自动生成，支持GUID，SQL语句(取第一行第一列的值)
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.Data.FieldBuildType.Customize">
            <summary>
            用户指定字，当字符为该值时，系统强制该字段值不能为空
            </summary>
        </member>
        <member name="T:Lib4Net.Data.SettingHelper">
            <summary>
            读取lib4net.setting中的节点param.add的值
            </summary>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetData(System.String)">
            <summary>
            获取指定名称对应的值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetBool(System.String,System.Boolean)">
            <summary>
            获取值为Bool类型的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetDouble(System.String,System.Double)">
            <summary>
            获取值为Double类型的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetDecimal(System.String,System.Decimal)">
            <summary>
            获取值为Decimal类型的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetInt(System.String,System.Int32)">
            <summary>
            获取值为整型数字的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetLong(System.String,System.Int64)">
            <summary>
            获取值为长整型数字的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.SettingHelper.GetDate(System.String,System.DateTime)">
            <summary>
            获取值为整型数字的数据
            </summary>
            <param name="name">名称</param>
            <param name="def">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ParamUtility">
            <summary>
            参数转换工具类，用于根据指定的字符串(包含有指定表达式)，输入参数源(键值对)翻译该字符串
            </summary>
        </member>
        <member name="F:Lib4Net.ParamUtility.PATTERN_BRACES">
            <summary>
            匹配花括号
            </summary>
        </member>
        <member name="M:Lib4Net.ParamUtility.Translate(System.String,Lib4Net.Data.KeyValues,System.String)">
            <summary>
            将指定字符串，根据传入的健值对翻译
            </summary>
            <param name="input">输入字符串</param>
            <param name="dic">健值对数据</param>
            <param name="encoding">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.ParamUtility.Translate(System.String,Lib4Net.ORM.IGetData,System.String)">
            <summary>
            将指定字符串，根据传入的健值对翻译
            </summary>
            <param name="input">输入字符串</param>
            <param name="entity">实现了IGetData接口的数据对象</param>
            <param name="encoding">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.Configuration.CoreConfigurationReader">
            <summary>
            lib4Net.setting配置文件读取
            </summary>   
        </member>
        <member name="M:Lib4Net.Configuration.CoreConfigurationReader.Get">
            <summary>
            获取配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.Security.IDecryption">
            <summary>
            加解密接口
            </summary>
        </member>
        <member name="M:Lib4Net.Security.IDecryption.Encrypt(System.String)">
            <summary>
            指定原文进行加密，输出加密字符串
            </summary>
            <param name="org">原文</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.IDecryption.Decrypt(System.String)">
            <summary>
            指定密文件进行解密，输入解密后的字符串
            </summary>
            <param name="ciphertext">密文</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.Security.Hex">
            <summary>
            提供16进制字符串转换
            </summary>
        </member>
        <member name="M:Lib4Net.Security.Hex.ToBase64String(System.String,System.String)">
            <summary>
            将指定字符串转换成Base64字符串
            </summary>
            <param name="str">原始字符串</param>
            <param name="encode">编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.FromBase64String(System.String,System.String)">
            <summary>
            将Base64字符串还原为指定编码的字符串
            </summary>
            <param name="str">Base64字符串</param>
            <param name="encode">编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.ToHexByte(System.Char)">
            <summary>
            将16进制字符(0-9,a-f)转换成0-15以内的数保存到byte中
            </summary>
            <param name="ch">16进制字符</param>
            <returns>byte</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.ToHexString(System.String,System.String)">
            <summary>
            将原始字符串转换成16进制字符串
            </summary>
            <param name="str">原始字符串</param>
            <param name="encoding">字符编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.ToHexString(System.Byte[])">
            <summary>
            将byte数组转换成16进制字符串
            </summary>
            <param name="buffer">byte[]</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.IsHexString(System.String)">
            <summary>
            检查字符串是否是16进制字符串
            </summary>
            <param name="str">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.Security.Hex.HexToBytes(System.String)">
            <summary>
            将16进制字符串转换为byte数组
            </summary>
            <param name="strData">16进制字符串</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:Lib4Net.Xml.XslTransform">
            <summary>
            使用XSLT样式表转换XML数据
            </summary>
        </member>
        <member name="M:Lib4Net.Xml.XslTransform.Transform(System.String,System.String,System.String)">
            <summary>
            转换到指定文件
            </summary>
            <param name="xslt">XSLT样式表</param>
            <param name="xml">XML数据源</param>
            <param name="outpath">输出文件</param>
        </member>
        <member name="T:Lib4Net.ORM.SqliteTemplateConfig">
            <summary>
             Sqlite SQL模板信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqliteTemplateConfig.#ctor">
            <summary>
            初始化 Sqlite SQL模板
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.ODXmlConfig">
            <summary>
            Object 2 DataBase 配置
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ODXmlConfig.Root">
            <summary>
            XML配置路径缺少路径为~/config
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ODXmlConfig.Path">
            <summary>
            XMl配置文件路径
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ODXmlConfig.ConfigType">
            <summary>
             配置类型
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Field`1">
            <summary>
            便于设置查询条件的ORM字段
            </summary>
            <typeparam name="T">字段对应的数据库字段类型</typeparam>
        </member>
        <member name="M:Lib4Net.ORM.Field`1.MakeDateRangeCondtion(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            构建日期范围查询条件字符串
            </summary>
            <param name="startDate">起始时间</param>
            <param name="endDate">结束时间</param>
            <param name="format">日期转换格式</param>
            <param name="dbformat">转换成SQL时的格式</param>
            <param name="condtionFormat">范围查询格式</param>
            <param name="autoAddOneDay">结束时间自动加1天</param>
            <param name="startFormat">开始时间格式</param>
            <param name="endFormat">结束时间格式</param>
        </member>
        <member name="M:Lib4Net.ORM.Field`1.MakeNumberRangeCondtion(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String)">
            <summary>
            构建数字范围查询语句
            </summary>
            <param name="startValue">开始值</param>
            <param name="endValue">结束值</param>
            <param name="startContainEqual">起始值是否保含"="</param>
            <param name="endContainEqual">结束值是否保含"="</param>
            <param name="condtionFormat">查询格式</param>
        </member>
        <member name="M:Lib4Net.ORM.Field`1.MakeNumberRangeCondtion(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.Boolean,System.String)">
            <summary>
            构建数字范围查询语句
            </summary>
            <param name="startValue">开始值</param>
            <param name="endValue">结束值</param>
            <param name="startContainEqual">起始值是否保含"="</param>
            <param name="endContainEqual">结束值是否保含"="</param>
            <param name="condtionFormat">查询格式</param>
        </member>
        <member name="P:Lib4Net.ORM.Field`1.QueryCondtion">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Field`1.Value">
            <summary>
            数据值
            </summary>
        </member>
        <member name="T:Lib4Net.IO.MemoryCache">
            <summary>
            系统内存缓存采用系统内存缓存进行封装
            </summary>
        </member>
        <member name="M:Lib4Net.IO.MemoryCache.Get(System.String)">
            <summary>
            获取缓存值
            </summary>
            <param name="name">缓存名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.MemoryCache.Delete(System.String)">
            <summary>
            指定缓存名称，删除该缓存
            </summary>
            <param name="name">缓存名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.MemoryCache.Delay(System.String,System.Int32)">
            <summary>
            根据缓存名称，删除缓存数据
            </summary>
            <param name="name">缓存名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.MemoryCache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存名称对应的值，如果缓存存在则覆盖，不存在则添加
            </summary>
            <param name="name">缓存名称</param>
            <param name="value">缓存值</param>
            <param name="expiresAt">过期时长,为0则永不过期</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.IO.MemoryCache.Instance">
            <summary>
            获取系统全局唯一实例
            </summary>     
        </member>
        <member name="T:Lib4Net.ORM.Result">
            <summary>
             操作结果状态类，用于记录执行结果的状态及错误信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.IResult">
            <summary>
            操作结果，用于记录执行结果的状态及错误信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.IResult.SetErrorCode(System.Int32)">
            <summary>
            设置错误码，并将当前状态置为失败
            </summary>
            <param name="errorCode">错误码</param>
        </member>
        <member name="M:Lib4Net.ORM.IResult.SetErrorMessage(System.String)">
            <summary>
            设置错误消息，并将当前状态置为失败
            </summary>
            <param name="message">消息内容</param>
        </member>
        <member name="M:Lib4Net.ORM.IResult.SetSuccessCode(System.Int32)">
            <summary>
            设置成功消息，并将当前状态置为失败
            </summary>
            <param name="errorCode">错误码</param>
        </member>
        <member name="M:Lib4Net.ORM.IResult.SetSuccessMessage(System.String)">
            <summary>
            设置成功消息，并将当前状态置为成功
            </summary>
            <param name="message">消息内容</param>
        </member>
        <member name="M:Lib4Net.ORM.IResult.ToString">
            <summary>
            输出字符串(Json格式)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.IResult.Status">
            <summary>
            执行结果 true:成功 false:失败
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IResult.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IResult.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.IResult.Item(System.String)">
            <summary>
            数据值
            </summary>
            <param name="key">值名</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Result.#ctor(System.Boolean)">
            <summary>
            指定状态，初始化操作结果
            </summary>
            <param name="status">状态true:成功 false:失败</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.#ctor(System.Boolean,System.String)">
            <summary>
            根据状态及消息信息，初始化操作结果
            </summary>
            <param name="status">状态true:成功 false:失败</param>
            <param name="message">消息信息</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            根据状态及消息信息，初始化操作结果
            </summary>
            <param name="status">状态true:成功 false:失败</param>
            <param name="successCode">成功消息</param>
            <param name="errorCode">错误消息</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            根据状态及消息信息，初始化操作结果
            </summary>
            <param name="status">状态true:成功 false:失败</param>
            <param name="sucMessage">成功消息</param>
            <param name="errorMessage">错误消息</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.#ctor(System.Boolean,System.Int32,System.String,System.String,System.String)">
            <summary>
            根据状态及消息信息，初始化操作结果
            </summary>
            <param name="status">状态true:成功 false:失败</param>
            <param name="errorcode">错误码</param>
            <param name="message">消息信息</param>
            <param name="key">键名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.SetErrorMessage(System.String)">
            <summary>
            设置失败消息，并将当前状态置为失败
            </summary>
            <param name="message">消息内容</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.SetSuccessMessage(System.String)">
            <summary>
            设置成功消息，并将当前状态置为成功
            </summary>
            <param name="message">消息内容</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.CopyFrom(Lib4Net.ORM.Result)">
            <summary>
            从指定的Result对象中复制已有数据
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.ToString">
            <summary>
            输出字符串(Json格式)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Result.SetErrorCode(System.Int32)">
            <summary>
            设置错误码，并将当前状态置为失败
            </summary>
            <param name="errorCode">错误码</param>
        </member>
        <member name="M:Lib4Net.ORM.Result.SetSuccessCode(System.Int32)">
            <summary>
            设置成功消息，并将当前状态置为失败
            </summary>
            <param name="errorCode">错误码</param>
        </member>
        <member name="P:Lib4Net.ORM.Result.Status">
            <summary>
            获取当前状态
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Result.Message">
            <summary>
            获取当前消息内容
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Result.Item(System.String)">
            <summary>
            设置或获取当前状态相关的数据
            </summary>
            <param name="key">健名</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.Result.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.EntityConfigType">
            <summary>
            实体配置类型
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.EntityConfigType.Entity">
            <summary>
            实体配置
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.EntityConfigType.Xml">
            <summary>
            XML配置
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.EntityConfigType.EntityAndXml">
            <summary>
            实体和XML配置
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.DataBaseConfig">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataBaseConfig.#ctor">
            <summary>
            默认初始化，指定数据为连接字符串为配置文件中第一个连接字符串
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DataBaseConfig.#ctor(System.Int32)">
             <summary>
            指定配置文件中连接字符串的索引号，设置当前实体对应的数据库连接信息
             </summary>
             <param name="connIndex">连接字符串索引号</param>
        </member>
        <member name="M:Lib4Net.ORM.DataBaseConfig.#ctor(System.Int32,System.String)">
            <summary>
            指定配置文件中连接字符串的索引号，设置当前实体对应的数据库连接信息
            </summary>
            <param name="connIndex">连接字符串索引号</param>
            <param name="IDecryptionType">加解密类型,必须实现IDecryptionType接口</param>
        </member>
        <member name="M:Lib4Net.ORM.DataBaseConfig.#ctor(System.String,System.String)">
            <summary>
            根据连接字符串，设置当前实体的数据库连接信息
            </summary>
            <param name="providerName">数据库提供程序</param>
            <param name="connctionstr">连接字符串</param>
        </member>
        <member name="M:Lib4Net.ORM.DataBaseConfig.#ctor(System.String,System.String,System.String)">
            <summary>
            根据连接字符串，设置当前实体的数据库连接信息
            </summary>
            <param name="providerName">数据库提供程序</param>
            <param name="connctionstr">连接字符串</param>
            <param name="IDecryptionType">加解密类型,必须实现IDecryptionType接口</param>
        </member>
        <member name="P:Lib4Net.ORM.DataBaseConfig.Name">
            <summary>
            获取或设置数据库名称
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataBaseConfig.ProviderName">
            <summary>
            获取提供程序名称
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataBaseConfig.ConnectionString">
            <summary>
            获取连接字符串
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DataBaseConfig.IDecryptionType">
            <summary>
            加解密类型,必须实现IDecryption接口,可使用系统内置的DES加解密Lib4Net.ORM.DesHelper
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.EntityBase">
            <summary>
            Lib4Net 中实体类的基类
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.IEntity">
            <summary>
            所有基于ORM数据实体类的基类
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.IGetData">
            <summary>
            根据名称获取值的接口
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.IGetData.GetDataValue(System.String)">
            <summary>
            指定实体键名获取对应的值
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.AddData(System.String,System.Object)">
            <summary>
            将数据以键值对方式添加到实体对象中
            </summary>
            <param name="name">健名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.GetData">
            <summary>
            获取实体中的所有数据集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.GetValue(System.String)">
            <summary>
            获取值，根据属性名称，或扩展参数名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.Contains(System.String)">
            <summary>
            扩展数据中是否包含该名称对应的值
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.ValidateFieldLength(Lib4Net.ORM.DbFieldProperty@)">
            <summary>
            验证字段的长度是否超过配置长度(字段DbLength大于0时有效)
            </summary>
            <param name="ofield">返回验证失败的字段属性</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.SetTableName(System.String)">
            <summary>
            设置数据库表名
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.GetTableName">
            <summary>
            获取当前表名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.GetDbFieldValue(System.String)">
            <summary>
            获取数据库字段值
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.IEntity.GetDbFieldName(System.String)">
            <summary>
            获取指定属性的数据库字段名称
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.IEntity.Result">
            <summary>
            服务执行结果
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.#ctor">
            <summary>
             初始化Lib4Net 中实体类的基类
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.#ctor(System.Boolean)">
            <summary>
             初始化Lib4Net 中实体类的基类
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.#ctor(System.String)">
            <summary>
            初始化Lib4Net 中实体类的基类
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.AddData(System.String,System.Object)">
            <summary>
            将数据以键值对方式添加到实体对象中
            </summary>
            <param name="name">健名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetData">
            <summary>
            获取实体中的所有数据集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetValue(System.String)">
            <summary>
            获取值，根据属性名称，或扩展参数名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetDataValue(System.String)">
            <summary>
            指定实体键名获取对应的值
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.SetTableName(System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="name">数据库表名</param>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.SetPkValue(System.Object)">
            <summary>
            设置主键值
            </summary>
            <param name="value">主键值</param>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetTableName">
            <summary>
            获取当前表名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetDbFieldValue(System.String)">
            <summary>
            获取数据库字段值
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.SetData(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            设置实体值，从NameValueCollection中获取
            </summary>
            <param name="nvc">键值对集合</param>
            <param name="setnull">当值为字符串空时，是否设置为空对象</param>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetDbFieldName(System.String)">
            <summary>
            获取指定属性的数据库字段名称
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.GetPropertyName(System.String)">
            <summary>
            获取指定数据库字段名对应的属性名称
            </summary>
            <param name="dbName">数据库字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.ValidateFieldLength(Lib4Net.ORM.DbFieldProperty@)">
            <summary>
            验证字段的长度是否超过配置长度(字段DbLength大于0时有效)
            </summary>
            <param name="ofield">返回验证失败的字段属性</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.EntityBase.Contains(System.String)">
            <summary>
            扩展数据中是否包含指定的键
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.EntityBase.Result">
            <summary>
            当前实体的状态信息，用于标识执行结果是否正确，或实体是否为空
            </summary> 
        </member>
        <member name="P:Lib4Net.ORM.EntityBase.ObjectConfig">
            <summary>
            当前对象的配置信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.DataSetExcutingArgs">
            <summary>
            查询数据执行前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.DataSetExcutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.DataSetExcutingArgs.DataSet">
            <summary>
            数据集,当取消执行后返回的值
            </summary>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.FromHex(System.String)">
            <summary>
            将16进制字符串转换成数组
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.AESEncrypt(System.String,System.String,System.String,System.Int32)">
            <summary>
            AES加密
            </summary>
            <param name="Input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.AESDecrypt(System.String,System.String,System.String,System.Int32)">
            <summary>
            AES解密
            </summary>
            <param name="Input"></param>
            <param name="iv"></param>
            <param name="key"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.ToHex(System.Byte[],System.Boolean)">
            <summary>
            将byte数组转成16进制字符串
            </summary>
            <param name="byData"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.MD5(System.Byte[])">
            <summary>
            MD5签名
            </summary>
            <param name="byData"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.MD5(System.String,System.Text.Encoding)">
            <summary>
            对字符串MD5进行签名
            </summary>
            <param name="strData"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.SHA1(System.Byte[])">
            <summary>
            SHA1签名
            </summary>
            <param name="byData"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.SHA1(System.String,System.Text.Encoding)">
            <summary>
            对字符串SHA1进行签名
            </summary>
            <param name="strData"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.SHA256(System.Byte[])">
            <summary>
            SHA256签名
            </summary>
            <param name="byData"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.SHA256(System.String,System.Text.Encoding)">
            <summary>
            对字符串SHA256进行签名
            </summary>
            <param name="strData"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.Des_Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            DES加密
            </summary>
            <param name="byData">加密数据</param>
            <param name="byKey">密钥，只有前8字节有效，不足8字节，后面被0</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.Des_Encrypt(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            DES加密
            </summary>
            <param name="strData">加密数据</param>
            <param name="strKey">密钥</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <param name="e">编码器</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.Des_Decrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            DES解密
            </summary>
            <param name="byData">解密数据</param>
            <param name="byKey">密钥</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.Des_Decrypt(System.Byte[],System.String,System.String,System.Text.Encoding)">
            <summary>
            DES解密算法
            </summary>
            <param name="strData">解密数据</param>
            <param name="strKey">密钥</param>
            <param name="strMode">解密模式</param>
            <param name="e">编码器</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.TripleDes_Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            DES加密
            </summary>
            <param name="byData">加密数据</param>
            <param name="byKey">密钥，只有前8字节有效，不足8字节，后面被0</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.TripleDes_Encrypt(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            3DES加密
            </summary>
            <param name="strData">加密数据</param>
            <param name="strKey">密钥</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <param name="e">编码器</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.TripleDes_Decrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            3DES解密
            </summary>
            <param name="byData">解密数据</param>
            <param name="byKey">密钥</param>
            <param name="strMode">加密模式，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.TripleDes_Decrypt(System.Byte[],System.String,System.String,System.Text.Encoding)">
            <summary>
            3DES解密算法
            </summary>
            <param name="strData">解密数据</param>
            <param name="strKey">密钥</param>
            <param name="strMode">解密模式</param>
            <param name="e">编码器</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.FromHex(System.Char)">
            <summary>
            将字符转换成16进制数字
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.GetDesProvider(System.String)">
            <summary>
            获取DES提供者
            </summary>
            <param name="strMode"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.GetTripleDesProvider(System.String)">
            <summary>
            获取3DES提供者
            </summary>
            <param name="strMode"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.ZhenXin_Encrypt(System.String,System.String,System.String)">
            <summary>
            用于臻信充值接口
            </summary>
            <param name="toEncrypt"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.ZhenXin_Decrypt(System.String,System.String,System.String)">
            <summary>
            用于臻信充值接口
            </summary>
            <param name="toDecrypt"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.MoPin_sign(System.String,System.String[])">
            <summary>
            魔品流量签名
            </summary>
            <param name="action"></param>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.SecurityCore.AESEncrypt_Zhyfy(System.String,System.String,System.String,System.Security.Cryptography.CipherMode)">
            <summary>
            卓越风云加密
            </summary>
            <param name="input"></param>
            <param name="k"></param>
            <param name="cipherMode"></param>
            <param name="paddingMode"></param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ChineseUtility">
            <summary>
            中文辅助类，根据数字返回中文大写名称
            </summary>
        </member>
        <member name="M:Lib4Net.ChineseUtility.GetCapital(System.Decimal)">
            <summary> 
            将数字转换成汉字大写
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="T:Lib4Net.Security.RsaKeyPair">
            <summary>
            RSA密钥对
            </summary>
        </member>
        <member name="P:Lib4Net.Security.RsaKeyPair.PublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="P:Lib4Net.Security.RsaKeyPair.PrivateKey">
            <summary>
            获取私钥
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.TypeParser">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.GetUnderlyingType(System.Type)">
            <summary>
            获取指定类型的基础类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.GetMemberValue(System.Reflection.MemberInfo,System.Object,System.Boolean)">
            <summary>
            获取字段的值
            </summary>
            <param name="defMemberInfo">默认类型</param>
            <param name="tagert">字段所属对象实例</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.SetMemberValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            通过反射设置成员的值
            </summary>
            <param name="target">要装载数据的目标对象</param>
            <param name="memberInfo">目标对象的成员</param>
            <param name="value">要装载的值</param>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.ChangeValue(System.Object,System.Type)">
            <summary>
            通过反射强制将值转换为指定类型
            </summary>
            <param name="propertyType">目标类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.IsAnsiClass(System.Reflection.MemberInfo)">
            <summary>
            是否是字符串类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.IsCustomType(System.Type)">
            <summary>
            是否是用户定义的范型类型
            </summary>     
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.TypeParser.IsCorrectType(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            是否是合法的数据类型,支持的数据类型包括
            字段串,和值类型的非空类型,GUID类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Template.Verbs.Link">
            <summary>
            and表达式
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.SqlMapConfig">
            <summary>
            SQL Server SQL模板
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqlMapConfig.#ctor">
             <summary>
            初始化 SQL Server SQL模板
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lib4Net.Net.EMail" -->
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseOptimizedDatasetSchema">
            <summary>
            Use the optimized fast Dataset Schema format (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseFastGuid">
            <summary>
            Use the fast GUID format (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.ShowReadOnlyProperties">
            <summary>
            Show the readonly properties of types in the output (default = False)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UsingGlobalTypes">
            <summary>
            Use the $types extension to optimise the output json (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.IgnoreCaseOnDeserialize">
            <summary>
            Ignore case when processing json and deserializing 
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.EnableAnonymousTypes">
            <summary>
            Anonymous types have read only properties 
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseExtensions">
            <summary>
            Enable Lib4Net.FastJSON extensions $types, $type, $map (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseEscapedUnicode">
            <summary>
            Use escaped unicode i.e. \uXXXX format for non ASCII characters (default = True)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.KVStyleStringDictionary">
            <summary>
            Output string key dictionaries as "k"/"v" format (default = False) 
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.UseValuesOfEnums">
            <summary>
            Output Enum values instead of names (default = False)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.IgnoreAttributes">
            <summary>
            Ignore attributes to check for (default : XmlIgnoreAttribute)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.ParametricConstructorOverride">
            <summary>
            If you have parametric and no default constructor for you classes (default = False)
            
            IMPORTANT NOTE : If True then all initial values within the class will be ignored and will be not set
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.DateTimeMilliseconds">
            <summary>
            Serialize DateTime milliseconds i.e. yyyy-MM-dd HH:mm:ss.nnn (default = false)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.SerializerMaxDepth">
            <summary>
            Maximum depth for circular references in inline mode (default = 20)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.InlineCircularReferences">
            <summary>
            Inline circular or already seen objects instead of replacement with $i (default = False) 
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSONParameters.SerializeToLowerCaseNames">
            <summary>
            Save property/field names as lowercase (default = false)
            </summary>
        </member>
        <member name="F:Lib4Net.FastJSON.JSON.Parameters">
            <summary>
            Globally set-able parameters for controlling the serializer
            </summary>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToNiceJSON(System.Object,Lib4Net.FastJSON.JSONParameters)">
            <summary>
            Create a formatted json string (beautified) from an object
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToJSON(System.Object)">
            <summary>
            Create a json representation for an object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToJSON(System.Object,Lib4Net.FastJSON.JSONParameters)">
            <summary>
            Create a json representation for an object with parameter override on this call
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.Parse(System.String)">
            <summary>
            Parse a json string and generate a Dictionary&lt;string,object&gt; or List&lt;object&gt; structure
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToDynamic(System.String)">
            <summary>
            Create a .net4 dynamic object from the json string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToObject``1(System.String)">
            <summary>
            Create a typed generic object from the json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToObject``1(System.String,Lib4Net.FastJSON.JSONParameters)">
            <summary>
            Create a typed generic object from the json with parameter override on this call
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToObject(System.String)">
            <summary>
            Create an object from the json
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToObject(System.String,Lib4Net.FastJSON.JSONParameters)">
            <summary>
            Create an object from the json with parameter override on this call
            </summary>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ToObject(System.String,System.Type)">
            <summary>
            Create an object of type from the json
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.FillObject(System.Object,System.String)">
            <summary>
            Fill a given object with the json represenation
            </summary>
            <param name="input"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.DeepCopy(System.Object)">
            <summary>
            Deep copy an object i.e. clone to a new object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.DeepCopy``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.Beautify(System.String)">
            <summary>
            Create a human readable string from the json 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.RegisterCustomType(System.Type,Lib4Net.FastJSON.Serialize,Lib4Net.FastJSON.Deserialize)">
            <summary>
            Register custom type handlers for your own types not natively handled by Lib4Net.FastJSON
            </summary>
            <param name="type"></param>
            <param name="serializer"></param>
            <param name="deserializer"></param>
        </member>
        <member name="M:Lib4Net.FastJSON.JSON.ClearReflectionCache">
            <summary>
            Clear the internal reflection cache so you can start from new (you will loose performance)
            </summary>
        </member>
        <member name="T:Lib4Net.DB.IDataAccessProvider">
            <summary>
            用于构建数据库操作的基础操作类,数据库类型通过providerName指定。
            系统首先检查该数据库是否安装，如果未安装则通过providerName匹配运行目录，反射获取DbProviderFactory对象，通过DbProviderFactory对象
            创建DbConnection,DbCommand等。
            目前本操作类支持SQL SERVER,Access,Oracle,MySQL,Sqlite。
            本类功能还包括如下:
            1. 事务
            2. 存储过程输出数据集及输出参数
            3. 批量数据新增，修改
            注意:当使用事务时，数据库连接对象无法自动释放，请使用using命令释放当前对象。未使用事务时对象将自动释放。
            </summary>     
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.BeginTransaction">
            <summary>
             启动事务,当调用此接口后数据库连接对象将无法自动释放，请使用using命令释放当前对象
            </summary>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Commit">
            <summary>
            提交由BeginTransaction启动的事务，提交后事务将被清除
            </summary>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Rollback">
            <summary>
            回滚由BeginTransaction启动的事务，提交后事务将被清除
            </summary>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetData(System.String,System.String[])">
            <summary>
            执行SQL语句，获取数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataSet(System.String,System.String[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataSetByProcedure(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，返回结果数据集
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataSetByProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataSetByProcedure(System.String,System.String[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.ExecuteProcToArray(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.ExecuteProcToArray(System.String,System.String[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.ExecuteProcToParameters(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，将返回结果填充到Lib4Net.Core.Comm.DbParameters中
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Alter(System.String,System.String[])">
            <summary>
            执行数据库修改操作，返回影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">存储过程参数</param>
            <returns></returns> 
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Scalar(System.String)">
            <summary>
            执行SQL语句，获取第一行第一列数据
            </summary>
            <param name="sql">SQL语句</param>       
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.BattchUpdate(System.String,System.Data.DataTable,Lib4Net.DB.DbParameter[])">
            <summary>
            批量数据修改
            </summary>
            <param name="updatesql">Update SQL语句</param>
            <param name="datatable">需要修改的表</param>
            <param name="args">SQL参数,必须包括参数名称，列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.BattchInsert(System.String,System.Data.DataTable,Lib4Net.DB.DbParameter[])">
            <summary>
            批量数据新增
            </summary>
            <param name="insertsql">Insert SQL语句</param>
            <param name="datatable">需要新增的数据表</param>
            <param name="args">SQL参数,必须包括参数名称，列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Alter(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行数据库修改操作，返回影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.Scalar(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行数据库修改操作，返回影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sprams">存储过程参数</param>
            <returns>返回第一行第一列</returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataSet(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataReader(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，DbDataReader
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetDataReader(System.String,System.String[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.GetData(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，获取数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sparms">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.BeginRead">
            <summary>
            启动DataReader读取数据
            </summary>
        </member>
        <member name="M:Lib4Net.DB.IDataAccessProvider.EndRead">
            <summary>
            关闭DataReader读取数据
            </summary>
        </member>
        <member name="P:Lib4Net.DB.IDataAccessProvider.ConnectionString">
            <summary>
            获取当前数据库连接字符串
            </summary>
        </member>
        <member name="P:Lib4Net.DB.IDataAccessProvider.ProviderName">
             <summary>
            获取当前数据库提供程序
             </summary>
        </member>
        <member name="P:Lib4Net.DB.IDataAccessProvider.DataSource">
            <summary>
            获取数据源
            </summary>
        </member>
        <member name="T:Lib4Net.WebUtility">
            <summary>
            提供基于Http的参数获取，合并，IP地址获取，及编码解码
            </summary>
        </member>
        <member name="M:Lib4Net.WebUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            顺序查找指定的一个或多个KEY的值，并返回第一个不为空的值
            </summary>
            <param name="nvc">NameValueCollection</param>
            <param name="keys">一个或多个KEY</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.Merge(System.Web.HttpRequest)">
            <summary>
            获取合并Get,POST请求的参数并返回参数集
            </summary>
            <param name="request">HttpRequest</param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.GetRequestData(System.Web.HttpRequest,System.String)">
            <summary>
            获取HttpRequest数据
            </summary>
            <param name="request">HttpRequest</param>
            <param name="encoding">编码格式</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.GetKeyValueString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            获取NameValueCollection中每一个参数组成的键值对
            </summary>
            <param name="nvc">NameValueCollection</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.GetClientIp">
            <summary>
            获取客户端IP地址
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.Encode(System.String,System.String)">
            <summary>
            获取指定参数的UrlEncode编码后的值
            </summary>
            <param name="value">参数值</param>
            <param name="encode">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.WebUtility.Decode(System.String,System.String)">
            <summary>
            获取指定参数的UrlDecode解码后的值
            </summary>
            <param name="value">参数值</param>
            <param name="encode">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.TypeUtility">
            <summary>
            对象通过反射创建对象,转换类型等
            </summary>
        </member>
        <member name="M:Lib4Net.TypeUtility.IsNumberType(System.Type)">
            <summary>
            检查指定类型为数字类型包括(只包括int,long,decimal,double)
            </summary>
            <param name="value">类型</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.Create(System.String,System.Object[])">
            <summary>
            创建指定类型的实例，类型全名，程序集名称
            </summary>
            <param name="typeName">类型及程序集名称　格式:类型全名,程序集名称</param>
            <param name="args">构造函数参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.Create``1(System.String,System.Object[])">
            <summary>
             创建指定类型的实例，类型全名，程序集名称，类型未实现该接口时将抛出异常
            </summary>
            <typeparam name="T">类型或接口,类型未实现该接口时将抛出异常</typeparam>
            <param name="typeName">类型及程序集名称　格式:类型全名,程序集名称</param>
            <param name="args">构造函数参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            指定动态链接库路径及反射类型,得到该类型实例
            </summary>
            <param name="assemblyName">动态链接库路径</param>
            <param name="typeName">反射类型</param>
            <param name="args">构造函数的参数</param>        
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateByAppName``1(System.String)">
            <summary>
            根据配置文件中指定的类型信息，创建对象  ，类型未实现该接口时将抛出异常
            </summary>
            <typeparam name="T">对象类型,类型未实现该接口时将抛出异常</typeparam>
            <param name="appName">配置文件中appSettings节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateInstance(System.String,System.Object[])">
            <summary>
            指定动态链接库路径及反射类型,得到该类型实例
            </summary>       
            <param name="typeName">反射类型</param>
            <param name="args">构造函数的参数</param>        
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateInstance``1(System.String,System.String,System.Object[])">
            <summary>
            动态从DLL中加载指定的类类型实例
            </summary>
            <typeparam name="T">要转换的类名</typeparam>
            <param name="assemblyPath">动态链接库路径</param>
            <param name="className">类名，格式:"命名空间.类名"</param>
            <param name="args">构造函数的参数</param>        
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态从DLL中加载指定的类类型实例
            </summary>
            <typeparam name="T">要转换的类名</typeparam>       
            <param name="typeName">类名，格式:"命名空间.类名"</param>
            <param name="args">构造函数的参数</param>        
        </member>
        <member name="M:Lib4Net.TypeUtility.GetInstances``1(System.String,System.Object[])">
            <summary>
             动态从DLL中加载指定的类类型实例
            </summary>
            <typeparam name="T">接口类型,动态链接库中返回实现了当前接口的类型实例</typeparam>
            <param name="assemblyPath">动态链接库路径</param>
            <param name="args">构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetTypes``1(System.Reflection.Assembly,System.Object[])">
            <summary>
            从指定程序集中获取类型列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="assembly">程序集路径</param>
            <param name="args">类型参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetTypes``1(System.String,System.Object[])">
            <summary>
            从指定程序集中获取类型列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="assemblyPath">程序集路径</param>
            <param name="args">类型参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetInstances``1(System.Reflection.Assembly,System.Object[])">
            <summary>
             动态从DLL中加载指定的类类型实例
            </summary>
            <typeparam name="T">接口类型,动态链接库中返回实现了当前接口的类型实例</typeparam>
            <param name="assembly">程序集</param>
            <param name="args">构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetInstances``1(System.Object[])">
            <summary>
             动态从DLL中加载指定的类类型实例
            </summary>
            <typeparam name="T">接口类型,动态链接库中返回实现了当前接口的类型实例</typeparam>
            <param name="args">构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.Load(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="assemblyName">程序集名称,不要加上程序集的后缀，如.dll</param>        
        </member>
        <member name="M:Lib4Net.TypeUtility.ConvertTo``1(System.Object)">
            <summary>
            数据强制转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="objdata">数据</param>  
        </member>
        <member name="M:Lib4Net.TypeUtility.ConvertTo(System.Object,System.Type)">
            <summary>
            数据强制转换
            </summary>
            <param name="objdata">数据</param>
            <param name="type">目标类型</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetCustomAttrInstance``1(System.Type)">
            <summary>
            获取类型的配置类型数据
            </summary>
            <typeparam name="T">配置属性的类型</typeparam>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            将值装载到目标对象的指定属性中
            </summary>
            <param name="target">要装载数据的目标对象</param>
            <param name="propertyName">目标对象的属性名</param>
            <param name="value">要装载的值</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            通过反射调用对象中的指定方法
            </summary>
            <param name="target">要装载数据的目标对象</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="value">要装载的值</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetPropertyValue(System.Object,System.String)">
            <summary>
            通过反射获取目标对象的指定属性的值
            </summary>
            <param name="target">要装载数据的目标对象</param>
            <param name="propertyName">目标对象的属性名</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetColumnProperDesc(System.Object)">
            <summary>
            通过反射获取列表数据中的每列数据信息
            </summary>
            <param name="dataItem">数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TypeUtility.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            通过反射设置成员的值
            </summary>
            <param name="target">要装载数据的目标对象</param>
            <param name="memberInfo">目标对象的成员</param>
            <param name="value">要装载的值</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.CoerceValue(System.Type,System.Type,System.Object)">
            <summary>
            通过反射强制将值转换为指定类型
            </summary>
            <param name="propertyType">目标类型</param>
            <param name="valueType">值的类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.GetPropertyType(System.Type)">
            <summary>
            通过反射获取类型,如果类型为Nullable(of T)，则返回Nullable(of T)的基础类型
            </summary>
            <param name="propertyType">需要转换的类型</param>
        </member>
        <member name="M:Lib4Net.TypeUtility.CreateSerClass(System.String,System.Object[])">
            <summary>
            创建所有可序列化的类对象
            </summary>
            <param name="assemblyPath">动态链接库路径</param>
            <param name="args">构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.TimeoutChecker">
            <summary>
            超时检测辅助类
            </summary>
        </member>
        <member name="M:Lib4Net.TimeoutChecker.#ctor(System.Int64)">
            <summary>
            初始化超时检测辅助类
            </summary>
            <param name="timeout">超时时间,秒</param>
        </member>
        <member name="M:Lib4Net.TimeoutChecker.Start">
            <summary>
            开始启动计时器
            </summary>
        </member>
        <member name="M:Lib4Net.TimeoutChecker.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:Lib4Net.TimeoutChecker.Check">
            <summary>
            检查是否超时
            </summary>
            <returns>true: 未超时，false已超时</returns>
        </member>
        <member name="M:Lib4Net.TimeoutChecker.Reset">
            <summary>
            重置计时器
            </summary>
        </member>
        <member name="T:Lib4Net.Pool.IObjectSet`1">
            <summary>
            对象管理器
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.IObjectSet`1.Get">
            <summary>
            获取一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectSet`1.Add(`0)">
            <summary>
            添加一个对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectSet`1.Remove(`0)">
            <summary>
            移除一个对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectSet`1.Clear">
            <summary>
            清除所有对象
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.IObjectSet`1.Cleanup(System.Int32)">
            <summary>
            清理未使用对象
            </summary>
        </member>
        <member name="P:Lib4Net.Pool.IObjectSet`1.Count">
            <summary>
            对象总数
            </summary>
        </member>
        <member name="P:Lib4Net.Pool.IObjectSet`1.AvailableCount">
            <summary>
            可用的对象数
            </summary>
        </member>
        <member name="P:Lib4Net.Pool.IObjectSet`1.ObjectFacotry">
            <summary>
            获取用于生成对象的工厂对象
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.XmlDbMapTransfer">
            <summary>
            从XML文件中获取对象对应的数据库配置信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.VerbChainsFactory">
            <summary>
            动词翻译工厂，并翻译对象进行缓存
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.VerbChainsFactory.GetParser``1">
            <summary>
            获取指定对象的翻译器
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.VerbChains`1">
            <summary>
            动词链表
            </summary>
            <typeparam name="T">链表类型</typeparam>
        </member>
        <member name="M:Lib4Net.ORM.VerbChains`1.#ctor">
            <summary>
            初始化动词链表
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.VerbChains`1.SendToData(Lib4Net.ORM.VerbData{`0})">
            <summary>
            发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Lib4Net.ORM.VerbChains`1.Translate(System.String)">
            <summary>
            翻译该命令
            </summary>
            <param name="command">命令</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.SyntaxResolveParser">
            <summary>
            分词转换器
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SyntaxResolveParser.Translate(System.String)">
            <summary>
            分词转换
            </summary>
            <param name="keyword">原文件</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.ParamsSyntaxParser">
            <summary>
            SQL参数语法分析器
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.CountExecutingArgs">
            <summary>
            获取条数执行前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.CountExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.CountExecutingArgs.Count">
            <summary>
            总条数
            </summary>
        </member>
        <member name="M:Lib4Net.Logs.Appenders.AppenderFilter.Filter(Lib4Net.Logs.Config.AppenderConfigCollection,System.String)">
            <summary>
            根据日志中指定的SourceName过滤Appender
            </summary>
            <param name="cols">所有Appender</param>
            <param name="sourceName">Logger的SourceName</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.IO.Mutex">
            <summary>
            全局互斥锁
            </summary>
        </member>
        <member name="M:Lib4Net.IO.Mutex.Lock">
            <summary>
            锁定当前操作，直到手动调用解除锁
            </summary>       
        </member>
        <member name="M:Lib4Net.IO.Mutex.TryLock(System.Int32)">
            <summary>
            试图获取当前锁，指定获取时间，如果失败返回False
            </summary>
            <param name="timeout"></param>
            <returns></returns>        
        </member>
        <member name="M:Lib4Net.IO.Mutex.Release">
            <summary>
            释放当前锁
            </summary>       
        </member>
        <member name="T:Lib4Net.SpellUtility">
            <summary>
            汉语拼音处理，获取字符的全拼，汉字的首字母
            </summary>
        </member>
        <member name="M:Lib4Net.SpellUtility.Convert(System.Char)">
            <summary>
            获取一个汉字的拼音声母
            </summary>
            <param name="chinese">Unicode格式的一个汉字</param>
            <returns>汉字的声母</returns>
        </member>
        <member name="M:Lib4Net.SpellUtility.GetSpell(System.String)">
            <summary>
            获取指定汉字的汉语拼音
            </summary>
            <param name="value">原串</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.SpellUtility.GetSpllFirLet(System.String)">
            <summary>
            获取指定汉字拼音的首字母
            </summary>
            <param name="value">汉字字符串</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.Pool.IObject">
            <summary>
            缓存池对象
            </summary>
        </member>
        <member name="T:Lib4Net.Net.HttpCookieContainer">
            <summary>
            http cookie 容器
            </summary>
        </member>
        <member name="M:Lib4Net.Net.HttpCookieContainer.GetContainer">
            <summary>
            获取cookie容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Net.HttpCookieContainer.AddCookies(System.Uri,System.String)">
            <summary>
            添加cookike信息
            </summary>
            <param name="uri">URL信息</param>
            <param name="cookies">cookie信息</param>
        </member>
        <member name="M:Lib4Net.Net.HttpCookieContainer.#ctor">
            <summary>
            初始化默认容器
            </summary>
        </member>
        <member name="P:Lib4Net.Net.HttpCookieContainer.Instance">
            <summary>
            获取实例
            </summary>     
        </member>
        <member name="T:Lib4Net.Net.HttpClient">
            <summary>
            处理HTTP请求
            </summary>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.AddCertFile(System.String,System.String)">
            <summary>
            添加证书文件
            </summary>
            <param name="certFile">证书文件路径</param>
            <param name="certPwd">证书密码</param>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.SetProxy(System.String,System.Int32)">
            <summary>
            设置网络访问代理
            </summary>
            <param name="ip">代理服务器IP地址</param>
            <param name="port">代理服务器端口</param>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.SetProxy(System.String,System.Int32,System.String,System.String)">
            <summary>
            设置网络访问代理
            </summary>
            <param name="ip">代理服务器IP地址</param>
            <param name="port">代理服务器端口</param>
            <param name="userName">用户名</param>
            <param name="pwd">密码</param>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            验证服务器证书
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.SetCookie(System.Net.HttpWebResponse,System.String)">
            <summary>
            添加Cookie数据
            </summary>
            <param name="response">HttpWebResponse</param>
            <param name="url">URL</param>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.SetCookieConatiner(Lib4Net.Net.HttpCookieContainer)">
            <summary>
            设置Cookie容器
            </summary>
            <param name="container">Cookie容器</param>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.Get(System.String,System.String,System.String,System.Int32)">
            <summary>
             执行HTTP GET请求
            </summary>
            <param name="url">GET　URL</param>
            <param name="encoding">页面编码</param>
            <param name="header">http头信息</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.PostByte(System.String,System.Byte[],System.String,System.String,System.Int32)">
            <summary>
            提交byte数组
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="encoding"></param>
            <param name="header"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Net.HttpClient.UploadFile(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="filePath">本地文件路径</param>
            <param name="posturl">远程提交文件路径</param>
            <param name="header">提交头信息</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.Net.HttpClient.StatusCode">
            <summary>
            当前执行的错误码
            </summary>
        </member>
        <member name="T:Lib4Net.Logs.Comm.LoggerSyntaxParser">
            <summary>
            布局匹配符语法转换
            </summary>
        </member>
        <member name="T:Lib4Net.FastJSON.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            </summary>
        </member>
        <member name="T:Lib4Net.DB.DataAccessProvider">
            <summary>
            数据库操作类,数据库类型通过providerName指定。
            系统首先检查该数据库是否安装，如果未安装则通过providerName匹配运行目录中名称为"providerName.dll"的程序集，
            通过反射获取DbProviderFactory对象，然后通过DbProviderFactory对象创建DbConnection,DbCommand等。
            支持所有提供ADO.NET标准接口的数据库, 目前已成功通过测试的数据库包括:SQL SERVER,Access,Oracle,MySQL,Sqlite。
            本类功能还包括如下:
            1. 事务(Ado.net)
            2. 存储过程输出数据集及输出参数
            3. 批量数据新增，修改
            注意:未使用事务时对象将自动释放。当使用事务时，数据库连接对象无法自动释放，请使用using命令释放当前对象。
            mysql下载　地址　http://dev.mysql.com/downloads/connector/net/1.0.html
            </summary>        
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider.IsReading">
            <summary>
            DataReader正在读取数据
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._providerName">
            <summary>
            数据库提供程序
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._Factory">
            <summary>
            数据操作工厂
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._Transaction">
            <summary>
            操作事务
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider.searchpaths">
            <summary>
            数据库提供程序搜索路径
            </summary>
        </member>
        <member name="F:Lib4Net.DB.DataAccessProvider._dataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor">
            <summary>
            根据配置文件中第一个连接字符串初始化对象
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.Int32)">
            <summary>
            根据指定索引号的连接字符串初始化对象
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.Int32,System.Data.Common.DbProviderFactory)">
            <summary>
            根据指定索引号的连接字符串初始化对象
            </summary>
            <param name="index">连接字符串索引号</param>
             <param name="facotry">DbProviderFactory</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.String)">
            <summary>
            根据连接字符串名称获取连接字符串，并初始化
            </summary>
            <param name="name">连接字符串名称</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            根据连接字符串名称获取连接字符串，并初始化
            </summary>
            <param name="name">连接字符串名称</param>
            <param name="factory">连接字符串名称</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.String,System.String)">
            <summary>
            指定连接字符串及数据库提供程序初始化对象
            </summary>
            <param name="connstring"></param>
            <param name="providername"></param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.#ctor(System.String,System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            指定连接字符串及数据库提供程序初始化对象
            </summary>
            <param name="providername">数据库提供程序</param>
            <param name="connstring">连接字符串</param>
             <param name="facotry">DbProviderFactory</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Dispose">
            <summary>
            释放由事务产生的的数据库连接对象
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Init(System.String,System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            通过连接字符串及数据提供程序初始化
            </summary>
            <param name="providerName">数据库提供程序</param>
            <param name="connStringString">连接字符串</param>
            <param name="factory">DbProviderFactory</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Init(System.String,System.String)">
            <summary>
            初始化当前对象
            </summary>
            <param name="providername">数据库提供程序</param>
            <param name="connstringString">连接字符串</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.BeginTransaction">
            <summary>
            启动事务,当调用此接口后数据库连接对象将无法自动释放，请使用using命令释放当前对象
            注：当前事务是ADO.NET事务，使用分布式事务，请直接使用
            隐式事务TransactionScope，或可提交事务CommittableTransaction
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.BeginRead">
            <summary>
            启动DataReader读取数据
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.EndRead">
            <summary>
            关闭DataReader读取数据
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Commit">
            <summary>
            提交由BeginTransaction启动的ADO.NET事务，提交后事务将被清除
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Rollback">
            <summary>
            回滚由BeginTransaction启动的ADO.NET事务，提交后事务将被清除
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.IsInstalled">
            <summary>
            获取当前数据库程序是否已安装
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.ReflectFactory">
            <summary>
            通过反射获取DbProviderFactory对象
            </summary>       
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.ReflectCommandBuilder">
            <summary>
            通过反射获取DbCommandBuilder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.InvokeCommandBuilder(System.Data.Common.DbCommand)">
            <summary>
            调用CommandBuilder
            </summary>
            <param name="command">DbCommand</param>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.PrepareCommand(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.String[])">
            <summary>
            初始化DbCommand对象
            </summary>
            <param name="conn">数据库连接对象DbConnection</param>
            <param name="type">CommandType</param>
            <param name="commandtext">数据源运行的文本命令</param>
            <param name="arrLst">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.PrepareCommand(System.Data.Common.DbConnection,System.Data.CommandType,System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            初始化DbCommand对象
            </summary>
            <param name="conn">数据库连接对象DbConnection</param>
            <param name="type">CommandType</param>
            <param name="commandtext">数据源运行的文本命令</param>
            <param name="args">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataSetByProcedure(System.String,System.String[])">
            <summary>
            执行存储过程，返回结果数据集
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataSetByProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程，返回结果数据集
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataSetByProcedure(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，返回结果数据集
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.ExecuteProcToArray(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.ExecuteProcToParameters(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行存储过程，将返回结果填充到DBParameters中
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.ExecuteProcToArray(System.String,System.String[])">
            <summary>
            执行存储过程，返回数据从输出参数里获取
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataSet(System.String,System.String[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataReader(System.String,System.String[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataReader(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetDataSet(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，返回数据集
            </summary>
            <param name="sql">存储过程名称</param>
            <param name="args">参数,SQL SERVER以@param0,@param1,@param2作为参数,其它数据库以:param0,param1,param2作为参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetData(System.String,System.String[])">
            <summary>
            执行SQL语句，获取数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sparms">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.GetData(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，获取数据集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sparms">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Scalar(System.String)">
            <summary>
            执行SQL语句，获取第一行第一列数据
            </summary>
            <param name="sql">SQL语句</param>       
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Scalar(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行SQL语句，获取第一行第一列数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sprams">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Alter(System.String,System.String[])">
            <summary>
            执行数据库修改操作，返回影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.Alter(System.String,Lib4Net.DB.DbParameter[])">
            <summary>
            执行数据库修改操作，返回影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.BattchUpdate(System.String,System.Data.DataTable,Lib4Net.DB.DbParameter[])">
            <summary>
            批量数据修改
            </summary>
            <param name="updatesql">Update SQL语句</param>
            <param name="datatable">需要修改的表</param>
            <param name="args">SQL参数,必须包括参数名称，列名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.DB.DataAccessProvider.BattchInsert(System.String,System.Data.DataTable,Lib4Net.DB.DbParameter[])">
            <summary>
            批量数据新增
            </summary>
            <param name="insertsql">Insert SQL语句</param>
            <param name="datatable">需要新增的数据表</param>
            <param name="args">SQL参数,必须包括参数名称，列名称</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.DB.DataAccessProvider.ConnectionString">
            <summary>
            获取当前数据库连接字符串
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DataAccessProvider.ProviderName">
            <summary>
            获取当前数据库提供程序
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DataAccessProvider.DataSource">
            <summary>
            获取数据源
            </summary>
        </member>
        <member name="T:Lib4Net.NetUtility">
            <summary>
            网络工具类，包括获取本机IP地址，IP地址与长整形数字之前相互转换
            </summary>
        </member>
        <member name="M:Lib4Net.NetUtility.GetLocalIp">
            <summary>
            获取本机IP地址，可通过配置文件配置IPMask属性值，配置后只有与IPMask匹配的IP才会返回
            未配置IPMask则默认返回第一个IP地址
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.NetUtility.ToInt(System.String)">
            <summary>
            IP地址转换为数字，将IP地址每段转换为16进制字符串，然后将16进制字符串转换为long类型数字
            </summary>
            <param name="ipAddress">IP v4地址</param>
            <returns>long</returns>
        </member>
        <member name="M:Lib4Net.NetUtility.ToIP(System.UInt32)">
            <summary>
            将数字转换成以3个点分隔的IP地址
            </summary>
            <param name="intIpAddr">数字</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.Serializer.JsonSerializer">
            <summary>
            Json数据转换
            </summary>
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            从json转化为实体对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.Serialize(System.Object)">
            <summary>
             将对象转换为json字符串
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.Serialize(System.Data.DataTable)">
            <summary>
            序列化DataTable
            </summary>
            <param name="table">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            将对象转换为json字符串
            </summary>
            <param name="obj">对象</param>
            <param name="datebyformat">格式化日期为yyyy-MM-dd HH:mm:ss</param>       
            <returns></returns>     
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.XmlToJSON(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            将XML文档转换成Json字符串
            </summary>
            <param name="doc">XML文档</param>
            <param name="containRootNode">是否包含根节点</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.JsonSerializer.XmlToJSON(System.String,System.Boolean)">
            <summary>
            将XML文档转换成Json字符串
            </summary>
            <param name="xml">XML字符串</param>
            <param name="containRootNode">是否包含根节点</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lib4Net.ORM.Template.Expressions.ValueExpression.#ctor(Lib4Net.ORM.Template.Expressions.IContext)" -->
        <member name="T:Lib4Net.ORM.TableConfig">
             <summary>
            设置当前类对应的数据表配置信息
             </summary>
        </member>
        <member name="M:Lib4Net.ORM.TableConfig.#ctor">
            <summary>
            默认方式构建
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.TableConfig.#ctor(System.String)">
            <summary>
            指定不同的信息
            </summary>      
            <param name="name">对应的数据表名称</param>      
        </member>
        <member name="M:Lib4Net.ORM.TableConfig.GetAlias">
            <summary>
            获取表别名
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.TableConfig.Name">
            <summary>
            实体对应的数据库表名,当实体名称与数据表不一致时用于指定匹配的表名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.TableConfig.Alias">
            <summary>
            表的别名
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.TableConfig.RowId">
            <summary>
            指定的RowId字段名称
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.TableConfig.Label">
            <summary>
            字符标签名，中文名字
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.MysqlMapConfig">
            <summary>
            SQL Server SQL模板
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.MysqlMapConfig.#ctor">
             <summary>
            初始化 SQL Server SQL模板
             </summary>
        </member>
        <member name="T:Lib4Net.LoggerManager">
            <summary>
            日志管理器，提供日志组件，并缓存该组件
            </summary>
        </member>
        <member name="M:Lib4Net.LoggerManager.GetDefLogger(System.String)">
            <summary>
            根据日志组件名称，获取默认日志组件
            </summary>
            <param name="name">日志组件名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.LoggerManager.GetLogger(System.String)">
            <summary>
            获取指定名称的日志组件，该名称作为日志组件名称和日志来源,作为日志来源时与Appender绑定
            </summary>
            <param name="sourceName">日志名称，日志源以'@'开头，则完全匹配Appender的SourceName</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.LoggerManager.GetLogger(System.String,System.String)">
            <summary>
            获取指定名称的日志组件
            </summary>
            <param name="name">新日志组件名称</param>
            <param name="sourceName">原日志组件名称</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.LoggerManager.Instance">
            <summary>
            日志管理器唯一对象
            </summary>
        </member>
        <member name="T:Lib4Net.Serializer.BinarySerializer">
            <summary>
            二进制数据序列化与读取转换
            </summary>
        </member>
        <member name="M:Lib4Net.Serializer.BinarySerializer.Serialize(System.String,System.Object)">
            <summary>
            将对象序列化为二进制文件,反序列化请调用Serializer对象
            </summary>  
            <param name="file">文件路径</param>
            <param name="vo">对像实例</param>
        </member>
        <member name="M:Lib4Net.Serializer.BinarySerializer.Deserialize``1(System.String)">
            <summary>
            将二进制数据文件反序列化为实体
            </summary>
            <typeparam name="T">对象类型</typeparam>    
             <param name="file">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Serializer.BinarySerializer.Serialize(System.Object)">
            <summary>
            将对象序列化到字节数组中
            </summary>
            <param name="instance">要序列化的对象</param>        
        </member>
        <member name="M:Lib4Net.Serializer.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            将字节数组反序列化为对象
            </summary>
            <typeparam name="T">要获取的类</typeparam>
            <param name="buffer">要反序列化的字节数组</param>        
        </member>
        <member name="T:Lib4Net.Pool.ObjectReloadStrategy">
            <summary>
            对像重新加载策略管理器，通过策略配置，达到该配置条件后会触发重新加载事件
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.ObjectReloadStrategy.#ctor(System.String)">
            <summary>
            根据配置策略初始化策略管理器
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.ObjectReloadStrategy.Increment">
            <summary>
            对操作进行计数
            </summary>
        </member>
        <member name="E:Lib4Net.Pool.ObjectReloadStrategy.Reload">
            <summary>
            达到配置的重新加载条件时触发此事件
            </summary>
        </member>
        <member name="T:Lib4Net.DB.DbParameter">
            <summary>
            数据库参数
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DbParameter.#ctor">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:Lib4Net.DB.DbParameter.#ctor(System.String,System.Object)">
            <summary>
            初始化输入参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.DB.DbParameter.#ctor(System.String)">
            <summary>
            初始化输出参数
            </summary>
            <param name="name"></param>     
        </member>
        <member name="M:Lib4Net.DB.DbParameter.ToString">
            <summary>
            输出参数的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.DbType">
            <summary>
            数据库数据类型
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.Size">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.Direction">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Lib4Net.DB.DbParameter.SourceColumn">
            <summary>
            数据源列名
            </summary>
        </member>
        <member name="T:Lib4Net.Data.HashNodeLocator">
            <summary>
            基于哈希一致性算法的节点选择器
            </summary>
        </member>
        <member name="M:Lib4Net.Data.HashNodeLocator.#ctor(System.String[])">
            <summary>
            哈希一致性算法节点选择器
            </summary>
            <param name="nodes">实际节点</param>
        </member>
        <member name="M:Lib4Net.Data.HashNodeLocator.#ctor(System.Int32,System.String[])">
            <summary>
            哈希一致性算法节点选择器
            </summary>
            <param name="nodeCopies">虚拟节点的个数,均匀分布则请使用4的倍数</param>
            <param name="nodes">实际节点名称</param>       
        </member>
        <member name="M:Lib4Net.Data.HashNodeLocator.GetNode(System.String)">
            <summary>
            查找Key值所在的节点
            </summary>
            <param name="key">KEY</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Data.HashNodeLocator.GetNodeForKey(System.Int64)">
            <summary>
            通过Key值获取节点
            </summary>
            <param name="hash"></param>
        </member>
        <member name="T:Lib4Net.Pool.IObjectPoolVM`1">
            <summary>
            对象池管理器（管理不同脚本的对象池，包括对象池空闲，繁忙状态切换等）
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.IsRegistPoolableGroup(System.String)">
            <summary>
            是否已注册指定名称的工厂类
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.RegistPoolableGroup(System.String,Lib4Net.Pool.IObjectFactory{`0})">
            <summary>
            注册对象生成工厂
            </summary>
            <param name="name">分组名称</param>
            <param name="factory">生成单个对象的工厂</param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.Apply(System.String)">
            <summary>
            申请一个可用的对象
            </summary>
            <param name="name">对象池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.Recycle(`0,System.String)">
            <summary>
            回收一个对象
            </summary>
            <param name="obj">对象</param>
            <param name="name">对象池名称</param>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.GetSnap(System.String)">
            <summary>
            获取对象池快照信息
            </summary>
            <param name="name">对象池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.GetBusyPoolSize(System.String)">
            <summary>
            获取对象池中忙碌对象个数
            </summary>
            <param name="name">对象池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.GetIdlePoolSize(System.String)">
            <summary>
            获取对象池中空闲对象个数
            </summary>
            <param name="name">对象池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.GetAvailableSize(System.String)">
            <summary>
            获取可用的对象总数
            </summary>
            <param name="name">对象池名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.Clear">
            <summary>
            清除缓存池在所有对象
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.IObjectPoolVM`1.Close">
            <summary>
            关闭引擎池
            </summary>
        </member>
        <member name="E:Lib4Net.Pool.IObjectPoolVM`1.PoolChanged">
            <summary>
            POOL发生变化时发生
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.VerbData`1">
            <summary>
            动词共享数据
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Lib4Net.ORM.VerbData`1.#ctor(Lib4Net.ORM.ISqlTemplateConfig)">
            <summary>
            初始化
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.Data">
            <summary>
            数据对象
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.MatchMode">
            <summary>
            匹配模式
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.ConnectMode">
            <summary>
            连接模式
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.OrderByCondtion">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.PageIndex">
            <summary>
            分页索引
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.TopCount">
            <summary>
            页条数
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.DbMapConfig">
            <summary>
            对象数据库配置
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.VerbData`1.SqlTemplateConfig">
            <summary>
            SQL模板
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.UpdateExecutedArgs">
            <summary>
            执行修改数据操作后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.UpdateExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="count">影响的行数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.UpdateExecutedArgs.Count">
            <summary>
            影响的行数
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.DataSetExcutedArgs">
            <summary>
            查询数据集执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.DataSetExcutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Data.DataSet)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="dataSet">查询数据集</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.DataSetExcutedArgs.DataSet">
            <summary>
            查询数据集
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.CreateNewExecutingArgs">
            <summary>
            创建新数据执行前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.CreateNewExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.CreateNewExecutingArgs.Count">
            <summary>
            影响的行数,当取消操作时返回此值
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.CreateNewExecutedArgs">
            <summary>
            添加参数执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.CreateNewExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
            <param name="count">操作影响的行数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.CreateNewExecutedArgs.Count">
            <summary>
            操作影响的行数
            </summary>
        </member>
        <member name="M:Lib4Net.Net.TcpClient.Close">
            <summary>
            关闭服务器连接
            </summary>
        </member>
        <member name="P:Lib4Net.Net.TcpClient.IsConnected">
            <summary>
            获取是否已连接到服务器
            </summary>
        </member>
        <member name="T:Lib4Net.Security.DSA">
            <summary>
            提供DSA加密处理
            </summary>
        </member>
        <member name="M:Lib4Net.Security.DSA.Encrypt(System.String,System.String)">
            <summary>
            获取DSA加密结果
            </summary>
            <param name="text">原文</param>
            <param name="encoding">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.ORM.SqlBuilder`1">
            <summary>
            SQL语句生成程序
            </summary>
            <typeparam name="T">类型，数据库配置通过Atrribute或XML指定</typeparam>
        </member>
        <member name="F:Lib4Net.ORM.SqlBuilder`1.oDMapConfig">
            <summary>
            Object Db 映射信息
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.SqlBuilder`1.sqlTemplateConfig">
            <summary>
            Sql 模板信息
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.SqlBuilder`1.deforderyby">
            <summary>
            默认排序
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.#ctor(System.String)">
            <summary>
            根据数据库提供程序初始化SQL语句生成类
            </summary>
            <param name="providerName">数据库提供程序</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.#ctor(Lib4Net.ORM.ISqlTemplateConfig)">
            <summary>
            根据SQL模板初始化
            </summary>
            <param name="config">SQL模板</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.#ctor">
            <summary>
            根据系统默认方式构建,需要为实体配置数据为连接信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.IsExistTable">
            <summary>
            判断表是否已存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.CreateBlock(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            创建查询块语句
            </summary>
            <param name="vo">实体</param>
            <param name="matchMode">字段匹配方式</param>
            <param name="connectMode">字段连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetCondtion(Lib4Net.ORM.DataQueryBlock,Lib4Net.ORM.Data.ConnectMode,Lib4Net.ORM.DataQueryBlock[])">
            <summary>
            获取条件语句，传入多个语句块
            </summary>
            <param name="block">查询块</param>
            <param name="connectMode">连接方式</param>
            <param name="blocks">其它块</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.DeleteByPrimaryKey(System.String)">
            <summary>
            获取数据删除SQL语句
            </summary>
            <param name="id">主键值，多个值用“逗号”分隔</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.CreateTable">
            <summary>
            获取创建表的SqlCommandData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.DeleteByPrimaryKeys(System.String)">
            <summary>
            获取数据删除的SqlCommandData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.DeleteByCondtion(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取数据删除的SQL语句
            </summary>
            <param name="vo">实据实体，包含删除条件的数据实体</param>
            <param name="matchMode">匹配方式，精确匹配或模糊匹配</param>
            <param name="connectMode">条件连接模式，AND连接或OR连接</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetCountByCondtion(`0)">
            <summary>
            获取指定条件的数据条数
            </summary>
            <param name="vo">查询条件实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetPagerData(`0,System.Int32,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取分页SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderBy">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.SelectByCondition(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询数据SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="orderBy">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.SelectTopByCondtion(`0,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Boolean)">
            <summary>
            查询数据SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="topCount">前N条数据</param>
            <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <param name="lockData">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetData(System.String,System.Boolean)">
            <summary>
            获取单条数据
            </summary>
            <param name="id">主健值</param>
             <param name="lockdata">是否锁定数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.UpdateByPrimaryKey(`0)">
            <summary>
            根据主键修改数据SQL语句
            </summary>
            <param name="vo">所有数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.UpdateByCondtion(`0,`0)">
            <summary>
            根据主键修改数据SQL语句
            </summary>
            <param name="set">用于生成Update Set的字段的实体</param>
            <param name="condtion">用于生成Update where的字段的实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.CreateNew(`0)">
            <summary>
            构建新增数据的SqlCommandData
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>  
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetContext(`0,System.String)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetContext(`0,System.String,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetContext(`0,System.String,System.Int32,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
            <param name="topCount">前N条数据</param>
            <param name="orderBy">排序条件</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetContext(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.GetContext(`0,System.String,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Int32,System.Int32)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
             <param name="orderby">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.BuildParams(System.String)">
            <summary>
             构建DbParameter参数
            </summary>
            <param name="id">主健ID</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.SqlBuilder`1.BuildParams(`0,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取所有参数数据
            </summary>
            <param name="vo">实体数据</param>
            <param name="isVague">是否是模糊匹配</param>
            <param name="containJoinField">如果实体中包含关联表信息，是否将关联表字段作为查询条件</param>
            <param name="isCondtion">当前实体中的字段是否作为查询条件</param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.SqlBuilder`1.EmptyEntity">
            <summary>
            获取当前空实体
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.SqlBuilder`1.ODMapConfig">
            <summary>
            对象数据库配置信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.SqlBuilder`1.SqlTemplateConfig">
            <summary>
            SQL语句模板配置信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Template.Verbs.Equal">
            <summary>
            操作符
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.OnlyXmlDbMapTransfer">
            <summary>
            从XML文件中获取对象对应的数据库配置信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.ScalarExecutingArgs">
            <summary>
            获取条数执行前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.ScalarExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
            初始化
            </summary>
            <param name="data">SQL操作参数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.ScalarExecutingArgs.Data">
            <summary>
            总条数
            </summary>
        </member>
        <member name="T:Lib4Net.IO.IniFile">
            <summary>
            INI文件操作 数据块，键，值的创建，删除
            </summary>   
        </member>
        <member name="M:Lib4Net.IO.IniFile.Read(System.String,System.String,System.String,System.String)">
            <summary>
            读取INI文件指定块的节点数据
            </summary>      
            <param name="filePath">文件路径</param>
            <param name="section">数据块</param>
            <param name="key">数据键</param>
            <param name="def">默认数据</param>
            <returns></returns>      
        </member>
        <member name="M:Lib4Net.IO.IniFile.Write(System.String,System.String,System.String,System.String)">
            <summary>
            写入INI文件
            </summary>     
            <param name="filePath">文件路径</param>
            <param name="section">块名称</param>
            <param name="key">键名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Lib4Net.IO.IniFile.Clear(System.String,System.String)">
            <summary>
            清除文件中指定的块
            </summary>       
            <param name="filePath">文件路径</param>
            <param name="section">块名称</param>
        </member>
        <member name="T:Lib4Net.RandomUtility">
            <summary>
            随机数辅助类，提供基于范围的随机数生成，GUID字符，GUID数字，随机字符等
            </summary>
        </member>
        <member name="M:Lib4Net.RandomUtility.GetNumber(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的随机整数，该随机数范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>  
            <returns>int</returns>
        </member>
        <member name="M:Lib4Net.RandomUtility.GetNumber(System.Int32)">
            <summary>
            生成指定长度的随机数字
            </summary>
            <param name="length">字符个数</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.RandomUtility.GetDouble">
            <summary>
            生成一个0.0到1.0的随机小数
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:Lib4Net.RandomUtility.GetString(System.Int32)">
            <summary>
            生成指定长度的随机字符
            </summary>
            <param name="length">字符个数</param>
            <returns>string</returns>   
        </member>
        <member name="M:Lib4Net.RandomUtility.GetGuid">
            <summary>
            生成唯一的GUID
            </summary>
            <returns>string</returns>  
        </member>
        <member name="M:Lib4Net.RandomUtility.GetGuidNum">
            <summary>
            获取GUID数字值
            </summary>
            <returns>long</returns>
        </member>
        <member name="M:Lib4Net.RandomUtility.GetLettler(System.Int32)">
            <summary>
            生成指定长度的，包含有字母　数字随机字符串
            </summary>
            <param name="length">字符个数</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.RandomUtility.createRandomCode(System.Char[],System.Int32)">
            <summary>
            从数组随机选取指定长度的字符
            </summary>
            <param name="chars">数据源</param>
            <param name="length">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.#ctor(System.String,System.String)">
            <summary>
            通过指定连接字符串索引初始化
            </summary>
            <param name="provider_name">数据提供类型</param>
            <param name="connect_string">连接字符串</param>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.#ctor(System.String)">
            <summary>
            通过指定连接字符串索引初始化
            </summary>
            <param name="pname">连接串名称</param>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Create(System.String,System.String)">
            <summary>
            通过指定连接字符串索引初始化
            </summary>
            <param name="provider_name">数据提供类型</param>
            <param name="connect_string">连接字符串</param>
            <returns></returns>     
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Execute(System.String,System.String[])">
            <summary>
            执行存储过程
            </summary>
            <param name="proceName">存储过程名称</param>
            <param name="args">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Exec(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Exec(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据SQL模板执行数据库操作
            </summary>
            <param name="fullPath">文件路径名/模板名 如:/config/shop/get_shop_info</param>
            <param name="input">模板使用的参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Scalar(System.String)">
            <summary>
            执行SQL语句，返回第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.Scalar(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据SQL模板执行数据库操作,返回第一行,第一列的值
            </summary>
            <param name="fullPath">文件路径名/模板名 如:/config/shop/get_shop_info</param>
            <param name="table">模板使用的参数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.GetData(System.String)">
            <summary>
            获取数据
            </summary>
            <param name="sql">查询SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.XmlDbProvider.GetData(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据SQL模板执行数据库操作,返回第一行,第一列的值
            </summary>
            <param name="fullPath">文件路径名/模板名 如:/config/shop/get_shop_info</param>
            <param name="input">模板使用的参数</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.StaticDataAccessObject">
            <summary>
            用于公共的无实体的数据访问
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.StaticDataAccessObject.#ctor">
            <summary>
            默认根据第一个连接字符串初始化数据访问对象
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.StaticDataAccessObject.#ctor(System.String)">
            <summary>
            根据连接字符串名称，初始化数据访问对象
            </summary>
            <param name="connectName">连接字符串名称</param>
        </member>
        <member name="P:Lib4Net.ORM.StaticDataAccessObject.StaticAccess">
            <summary>
            数据库访问对象
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.StaticDataAccessObject.DataAccess">
            <summary>
            数据库访问对象
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.Data.SqlCommandData">
            <summary>
            数据库操作数据，包括SQL语句，及输入参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.SqlCommandData.ToSqlString">
            <summary>
            转换为可直接执行的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.Data.SqlCommandData.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Data.SqlCommandData.SqlText">
            <summary>
            获取或设置SQL语句，或存储过程名称
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Data.SqlCommandData.Type">
            <summary>
            指定如何解释命令字符串
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Data.SqlCommandData.DbParams">
            <summary>
            数据库输入参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Template.Expressions.FullFieldExpression.#ctor(Lib4Net.ORM.Template.Expressions.IContext)">
            <summary>
            支持的表达式如:{@t.OrderNo=$OrderNo};{@t.OrderNo>=$OrderNo};
            {@t.OrderNo in ($OrderNo)}等
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Lib4Net.ORM.SqlTemplatesFactory">
            <summary>
            SQL模板工厂
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.SqlTemplatesFactory.GetTemplateConfig(System.String)">
            <summary>
            根据数据库提供程序名称,获取SQL模板信息,已缓存对象
            </summary>
            <param name="providerName">数据库提供程序,
            如Sqlite:System.Data.SQLite;
            Oracle:System.Data.OracleClient
            </param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.DbFieldProperty">
            <summary>
            数据库字段信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DbFieldProperty.#ctor">
            <summary>
            初始化数据库字段信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DbFieldProperty.GetQueryCondtion(System.Object)">
            <summary>
            是否保护查询条件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.DbFieldProperty.SetValue(System.Object,System.Object)">
            <summary>
            设置对象的值
            </summary>
            <param name="vo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Lib4Net.ORM.DbFieldProperty.GetValue(System.Object)">
            <summary>
            获取对象中当前属性的值
            </summary>
            <param name="vo"></param>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.DbFieldProperty.DbField">
            <summary>
            数据库字段信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.DbFieldProperty.Property">
            <summary>
            对象属性信息
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.DBTable">
            <summary>
            提供DataTable数据表结构处理  
            </summary>   
        </member>
        <member name="M:Lib4Net.ORM.DBTable.#ctor">
            <summary>
            初始化数据列表
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.DBTable.#ctor(System.Data.DataTable)">
            <summary>
            初始化数据列表
            </summary>
            <param name="table">DataTable</param>
        </member>
        <member name="M:Lib4Net.ORM.DBTable.GetRowCount">
            <summary>
            获取数据总行数
            </summary>
            <returns>返回行个数</returns>
        </member>
        <member name="M:Lib4Net.ORM.DBTable.GetColCount">
            <summary>
            获取数据总列数
            </summary>
            <returns>返回列数</returns>
        </member>
        <member name="M:Lib4Net.ORM.DBTable.IGet(System.Int32,System.Int32)">
            <summary>
            获取指定行索引和列索引的数据
            </summary>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <returns>返回值</returns>       
        </member>
        <member name="M:Lib4Net.ORM.DBTable.Get(System.Int32,System.String)">
            <summary>
            获取指定行索引和列索引的数据
            </summary>
            <param name="row">行索引</param>
            <param name="cName">列名称</param>
            <returns>返回值</returns>       
        </member>
        <member name="M:Lib4Net.ORM.DBTable.Add(System.String[])">
            <summary>
            向实例是追加一行数据
            </summary>
            <param name="values">行值</param>
        </member>
        <member name="T:Lib4Net.ORM.Data.UpdateExecutingArgs">
            <summary>
            执行修改数据前参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.UpdateExecutingArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData)">
            <summary>
             初始化
            </summary>
            <param name="data">SQL操作语句</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.UpdateExecutingArgs.Count">
            <summary>
            影响的行数,当取消操作时返回此值
            </summary>
        </member>
        <member name="T:Lib4Net.StringUtility">
            <summary>
            提供字符串的类型检查及转换操作，包括object对象转换为字符串，
            字符串转换为数字，布尔值，字符串截取，以及常用的类型检查包括：整数，小数，日期，空，布尔值,
            字母，中文，邮件地址，邮编，身份证号等
            </summary>
        </member>
        <member name="M:Lib4Net.StringUtility.IsNumber(System.String)">
            <summary>
            判断输入的字符串是否是数字类型,包括正数(+)，负数(-)，小数
            </summary>
            <param name="value">输入字符串</param>
            <returns>bool</returns> 
        </member>
        <member name="M:Lib4Net.StringUtility.IsInteger(System.String)">
            <summary>
            判断输入的字符串是否是整数，包括：正整数(+)，负整数(-)
            </summary>
            <param name="value">输入字符串</param>
            <returns>bool</returns>    
        </member>
        <member name="M:Lib4Net.StringUtility.IsDateTime(System.String)">
             <summary>
            判断输入的字符串是否是日期类型
             </summary>
             <param name="value">输入字符串</param>
             <returns>bool</returns>       
        </member>
        <member name="M:Lib4Net.StringUtility.IsBoolean(System.String)">
            <summary>
            判断输入的字符串是否是布尔值
            </summary>
            <param name="value">输入字符串</param>
            <returns>bool</returns>       
        </member>
        <member name="M:Lib4Net.StringUtility.IsLettler(System.String)">
            <summary>
            判断输入的字符串是否是全字母字符
            </summary>
            <param name="value">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.IsLettlerAndNum(System.String)">
             <summary>
            判断输入的字符串是否是字符和数字的组合
             </summary>
             <param name="value">字符串</param>
             <returns>bool</returns>       
        </member>
        <member name="M:Lib4Net.StringUtility.IsEmalAddress(System.String)">
            <summary>
            判断输入的字符串是否是邮箱地址
            </summary>
            <param name="value">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.IsIPAddress(System.String)">
            <summary>
            判断输入的字符串是否是IPV4格式地址
            </summary>
            <param name="objString">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.IsIdCard(System.String)">
            <summary>
            判断输入字符串是否是13位或15位身份证号
            </summary>
            <param name="value">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.IsPostalCode(System.String)">
            <summary>
            判断输入的字符串是否是6位数字
            </summary>
            <param name="value">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.HasChinese(System.String)">
            <summary>
            判断输入的字符串是否包含中文字符
            </summary>
            <param name="value">字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.IsNullOrEmpty(System.Object[])">
            <summary>
            判断输入的一个或多个object参数中是否有一个值为空
            </summary>
            <param name="strs">一个或多个object值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.ToString(System.Object,System.String)">
            <summary>
            将object对象转换为字符串，转换失败后使用默认字符串
            </summary>
            <param name="obj">输入对象</param>
            <param name="def">默认值</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.ToBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            将字符串转换为布尔值，转换失败则返回默认值,只有当值为"true"或"1"时返回布尔值的true,其它情况返回false
            </summary>
            <param name="value">输入字符串</param>
            <param name="def">默认值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.GetString(System.Byte[],System.String)">
            <summary>
            根据指定的编码格式，将byte[]数组转换为字符串
            </summary>
            <param name="buffer">输入byte数组</param>
            <param name="encodingName">编码名称</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.CutString(System.String,System.Int32)">
            <summary>
            根据指定的字符数截取字符串，当字符串实际长度超过截取字符串数时返回字符串包含"..."
            </summary>
            <param name="value">待截取字符串</param>
            <param name="length">字符数</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.FirstString(System.String,System.String)">
            <summary>
            获取以指定分隔符分隔的字符串数据的第一个字符串
            </summary>
            <param name="value">字符串</param>
            <param name="split">分隔符</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.Substring(System.String,System.Int32)">
            <summary>
            获取字符串的前N个字符
            </summary>
            <param name="value">字符串</param>
            <param name="count">个数</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.ToInt(System.String,System.Nullable{System.Int32})">
             <summary>
            将字符串转化为整数类型，转换失败返回指定的返回值
             </summary>
             <param name="value">字符串</param>
             <param name="def">默认值</param>
             <returns>int?</returns>   
        </member>
        <member name="M:Lib4Net.StringUtility.ToLong(System.String,System.Nullable{System.Int64})">
            <summary>
            字符串转换为长整形数字(Long)，转换失败则返回默认值
            </summary>
            <param name="value">字符串</param>
            <param name="def">默认值</param>
            <returns>long?</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.ToDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            将字符串转化为小数类型(decimal)，转换失败则返回默认值
            </summary>
            <param name="value">字符串</param>
             <param name="retValue">默认值</param>
            <returns>decimal?</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.Round(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            将输入的小数四舍五入，小数位全是0时可以去掉小数位
            </summary>
            <param name="value">输入小数</param>
            <param name="pointLength">保留小数位</param>
            <param name="removeZero">小数位全为0时，是否去掉小数位</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Lib4Net.StringUtility.GetDecimalLength(System.String)">
            <summary>
            获取小数位数格式值，如100.05返回结果为3.2
            </summary>
            <param name="value">字符串</param>
            <returns>decimal</returns>
        </member>
        <member name="T:Lib4Net.Configuration.ConfigurationReader`1">
            <summary>
            配置文件读取操作类，包括对应用程序配置文件的读取和自定义的配置文件
            优先读取应用程序配置，其实是自定义的配置文件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Lib4Net.Security.Rsa">
            <summary>
            RSA加解密帮助类
            </summary>
        </member>
        <member name="M:Lib4Net.Security.Rsa.CreateRsaKeys">
            <summary>
            创建公钥私钥对
            </summary>
            <returns>RsaKeyPair</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.Encrypt(System.String,System.String)">
            <summary>
            指定公钥加密数据
            </summary>
            <param name="publicKey">公钥XML字符串</param>
            <param name="data">数据</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.EncryptByPem(System.String,System.String)">
            <summary>
            根据PEM格式公钥进行加密
            </summary>
            <param name="publicKey">公钥内容</param>
            <param name="data">待加密数据</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.DecryptByPem(System.String,System.String)">
            <summary>
            根据PEM格式私钥进行解密
            </summary>
            <param name="privateKey">私钥内容</param>
            <param name="data">已加密数据</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.EncryptByPemFile(System.String,System.String)">
            <summary>
            根据PEM格式公钥进行加密
            </summary>
            <param name="publicKeyPath">PEM公钥文件路径</param>
            <param name="data">待加密字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.DecryptByPemFile(System.String,System.String)">
            <summary>
            根据PEM格式私钥进行加密
            </summary>
            <param name="privateKeyPath">PEM私钥文件路径</param>
            <param name="data">待解密字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.Decrypt(System.String,System.String)">
            <summary>
            指定私钥解密数据
            </summary>
            <param name="privateKey">私钥XML字符串</param>
            <param name="data">数据</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Rsa.IsValidPair(System.String,System.String,System.String)">
            <summary>
            验证公钥私钥对
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <param name="rsaKey"></param>
            <returns>bool</returns>
        </member>
        <member name="T:Lib4Net.Security.Des">
            <summary>
            提供DES加密，解密方法
            </summary>
        </member>
        <member name="M:Lib4Net.Security.Des.Encrypt(System.String,System.String)">
            <summary>
            DES加密(ECB/PKCS7)
            </summary>
            <param name="key">密钥</param>
            <param name="data">原文</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.Des.Decrypt(System.String,System.String)">
            <summary>
            DES解密(ECB/PKCS7)
            </summary>
            <param name="data">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.Des.Encrypt(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="key">密钥</param>
            <param name="data">原文</param>
            <param name="mode">加密模式：，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.Des.Decrypt(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">密文</param>
            <param name="key">密钥</param>
            <param name="mode">解密模式：，常用的有：ECB/PKCS7,ECB/None,ECB/Zero,CBC/PKCS7,CBC/None,CBC/Zero</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.TxtFile.Read(System.String,System.String)">
            <summary>
             从文本文件中读取所有文本字符
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.TxtFile.ReadAllLines(System.String,System.String)">
            <summary>
            从文件中读出所有行
            </summary>
            <param name="path">文件路径</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.TxtFile.Write(System.String,System.String,System.String)">
            <summary>
            将文本写入到文本文件中
            </summary>      
            <param name="content">文本内容</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.IO.TxtFile.Write(System.String,System.Byte[])">
            <summary>
            将二进制数据写入文件中
            </summary>       
            <param name="buffer">文本内容</param>  
            <returns></returns>       
        </member>
        <member name="M:Lib4Net.IO.TxtFile.Append(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件的尾部追加内容
            </summary>        
            <param name="content">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.BuildParams(System.String)">
            <summary>
             构建DbParameter参数
            </summary>
            <param name="id">主健ID</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.BuildParams(`0)">
            <summary>
            构建DbParameter参数
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.CreateNew(`0)">
            <summary>
            构建新增数据的SqlCommandData
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>  
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.DeleteByCondtion(`0,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            构建数据删除SqlCommandData
            </summary>
            <param name="vo">实体数据</param>
            <param name="matchMode">数据匹配模式</param>
            <param name="connectMode">条件连接方式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.DeleteByPrimaryKey(`0)">
            <summary>
            构建数据删除SqlCommandData
            </summary>
            <param name="vo">实体</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetContext(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode,System.Int32,System.Int32)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetContext(`0,System.String)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetData(System.String)">
            <summary>
            获取主健值对应的数据
            </summary>
            <param name="id">主健</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetContext(`0,System.String,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="text">SQL模板</param>
            <param name="orderBy">排序字段</param>
            <param name="matchMode">匹配模式</param>
            <param name="connectMode">连接方式</param>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetContext(System.String)">
            <summary>
            获取指定条件的SQL语句
            </summary>
            <param name="text">SQL模板</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetCountByCondtion(`0)">
            <summary>
            获取查询条数的SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetPagerData(`0,System.Int32,System.Int32)">
            <summary>
            获取分页SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.SelectByCondition(`0,System.String,Lib4Net.ORM.Data.MatchMode,Lib4Net.ORM.Data.ConnectMode)">
            <summary>
            查询数据SQL语句
            </summary>
            <param name="vo">实体数据</param>
            <param name="orderBy">排序字段</param>
            <param name="mathMode">匹配模式</param>
            <param name="connectMode">连接模式</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.UpdateByPrimaryKey(System.String)">
            <summary>
            根据主键修改数据SQL语句
            </summary>
            <param name="id">主健ID</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ISqlBuilder`1.GetCondtion(Lib4Net.ORM.DataQueryBlock,Lib4Net.ORM.Data.ConnectMode,Lib4Net.ORM.DataQueryBlock[])">
            <summary>
            将多个实体分块构建SQL语句
            </summary>
            <param name="block">实体块</param>
            <param name="connectMode">连接符</param>
            <param name="blocks">其它块</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Template.Verbs.Field">
            <summary>
            表字段名
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.ObjectDbMapConfig">
            <summary>
            对象数据库映射配置信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapConfig.GetDbFieldName(System.String)">
            <summary>
            获取指定属性对应的数据库字段名称
            </summary>
            <param name="ppName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapConfig.#ctor">
            <summary>
            对象数据库映射配置信息
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.ObjectDbMapConfig.GetDbFieldList">
            <summary>
            获取以数据库字段名为键名的集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.DataBase">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.Table">
            <summary>
            数据表信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.ObjectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.Fields">
            <summary>
            数据字段信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.Settings">
            <summary>
            扩展配置信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.PrimaryKeyField">
            <summary>
            主健信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.DeleteField">
            <summary>
            删除字段信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.ObjectDbMapConfig.SqlTemplates">
            <summary>
            SQL模板数据
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.TableJoinType">
            <summary>
            表关联类型
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.TableJoinType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.TableJoinType.LeftJoin">
            <summary>
            左连接
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.TableJoinType.RightJoin">
            <summary>
            右链接
            </summary>
        </member>
        <member name="F:Lib4Net.ORM.TableJoinType.InnerJoin">
            <summary>
            等值连接
            </summary>
        </member>
        <member name="M:Lib4Net.IO.JsonHelper.ConvertDateStringToJsonDate(System.Text.RegularExpressions.Match)">
            <summary>   
             将时间字符串转为Json时间  
            </summary>         
        </member>
        <member name="T:Lib4Net.Pool.ObjectVersionVM`1">
            <summary>
            引擎版本管理器(负责引擎池管理器的实始化，回收，新旧引擎管理器的切换)
            </summary>
            <typeparam name="T">引擎类型</typeparam>
        </member>
        <member name="M:Lib4Net.Pool.ObjectVersionVM`1.Reload">
            <summary>
            重新加载脚本文件
            </summary>
        </member>
        <member name="M:Lib4Net.Pool.ObjectVersionVM`1.GetSnap">
            <summary>
            获取引擎快照信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.ObjectVersionVM`1.GetCurrent">
            <summary>
            获取当前引擎池
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Pool.ObjectVersionVM`1.Cleanup(System.Object)">
            <summary>
            清除历史引擎
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Lib4Net.DateUtility">
            <summary>
            提供日期转换的基础操作类
            </summary>
        </member>
        <member name="M:Lib4Net.DateUtility.ToDateTime(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            将字符串转化为日期类型数据，当转换失败时返回指定的返回值
            </summary>
            <param name="value">字符串</param>
            <param name="format">字符串的日期格式</param>
            <param name="def">默认值</param>
            <returns>DateTime?</returns>
        </member>
        <member name="M:Lib4Net.DateUtility.ToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            转化为日期类型，当转换失败时返回指定的返回值
            </summary>
            <param name="value">字符串</param>
            <param name="def">默认值</param>
            <returns>DateTime?</returns>
        </member>
        <member name="M:Lib4Net.DateUtility.ToDayOfWeek(System.DateTime)">
            <summary>
            获取当前日期是本周的星期几，返回:星期一,星期二等
            </summary>
            <param name="value">日期</param>
            <returns>string</returns>
        </member>
        <member name="T:Lib4Net.Security.Md5">
            <summary>
            Md5加密帮助类
            </summary>
        </member>
        <member name="M:Lib4Net.Security.Md5.GetHMac(System.String,System.String,System.String)">
            <summary>
            获取HMac加密结果
            </summary>
            <param name="data">数据原文</param>
            <param name="password">密码</param>
            <param name="encoding">编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Md5.GetRaw(System.String,System.String)">
            <summary>
            获取MD5加密的byte数据
            </summary>
            <param name="strData">加密原串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Security.Md5.Encrypt(System.String,System.String)">
            <summary>
            计算32位MD5加密值
            </summary>
            <param name="strData">加密原文</param>
            <param name="encoding">编码名称，默认为utf-8</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Md5.Encrypt(System.String,System.Int32)">
            <summary>
             指定位数计算MD5加密值
            </summary>
            <param name="strData">加密原文</param>
            <param name="len">MD5位数16或32</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.Md5.EncryptFile(System.String)">
            <summary>
            计算文件的32位MD5值
            </summary>
            <param name="path">文件路径</param>
            <returns>string</returns>       
        </member>
        <member name="T:Lib4Net.Xml.XmlNode">
            <summary>
            XML节点
            </summary>
        </member>
        <member name="M:Lib4Net.Xml.XmlNode.#ctor(System.Xml.XmlNode)">
            <summary>
            指定标准的XmlNode节点初始化
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Lib4Net.Xml.XmlNode.GetChildNodes">
            <summary>
            获取所有子节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Xml.XmlNode.SelectNodes(System.String)">
            <summary>
            指定XPATH查询符合条件的所有节点
            </summary>
            <param name="xpath">标准XPATH路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Xml.XmlNode.SelectSingleNode(System.String)">
            <summary>
            指定XPATH查询符合条件的第一个节点
            </summary>
            <param name="xpath">标准XPATH路径</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.Xml.XmlNode.GetAttribute(System.String)">
            <summary>
            指定属性名称，获取属性值
            </summary>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Template.Expressions.ConditionExpression">
            <summary>
            表达式，{*ids} 表示名称为ids的字符串,如:1,2,3
            
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Template.Expressions.ConditionExpression.#ctor(Lib4Net.ORM.Template.Expressions.IContext)">
            <summary>
            支持表达式如:{:数字字母下划线}
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Lib4Net.Logs.Verbs.VerbParser.Parser(Lib4Net.Logs.Comm.EventLog,System.String)">
            <summary>
            对指定的输入字符串进行格式化转换，并输出转换后的字符串
            </summary>
            <param name="log">日志信息，数据源</param>
            <param name="format">待转换字符串</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ValidateCodeUtility">
            <summary>
            验证码库
            </summary>
        </member>
        <member name="M:Lib4Net.ValidateCodeUtility.Create(System.Web.HttpResponse,System.Int32)">
            <summary>
            指定验证码长度，创建验证码图片
            </summary>
            <param name="response">当前页面</param>
            <param name="length">验证码个数</param>
        </member>
        <member name="M:Lib4Net.ValidateCodeUtility.Create(System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="length">指定验证码的长度</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ValidateCodeUtility.Create(System.Web.HttpResponse,System.String)">
            <summary>
            创建验证码的图片
            </summary>
            <param name="response">要输出到的page对象</param>
            <param name="validateNum">验证码</param>
        </member>
        <member name="M:Lib4Net.ValidateCodeUtility.GetImageWidth(System.Int32)">
            <summary>
            得到验证码图片的长度
            </summary>
            <param name="validateNumLength">验证码字符数</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ValidateCodeUtility.GetImageHeight">
            <summary>
            得到验证码的高度
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lib4Net.ValidateCodeUtility.MaxLength">
            <summary>
            验证码的最大长度
            </summary>
        </member>
        <member name="P:Lib4Net.ValidateCodeUtility.MinLength">
            <summary>
            验证码的最小长度
            </summary>
        </member>
        <member name="T:Lib4Net.EnumUtility">
            <summary>
            枚举操作类，提供由枚举名称，枚举值转换为枚举的操作，及指定枚举是否包含指定枚举名称或值的操作等
            </summary>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetInstance``1(System.String)">
            <summary>
            将枚举成员名称转换为指定枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="member">枚举成员名称</param>
            <returns>T</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetInstanceByValue``1(System.Int32)">
            <summary>
            将枚举成员值转换为指定枚举,转换失败时返回空
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举成员值</param>
            <returns>T?</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetInstance(System.Type,System.String)">
            <summary>
            将枚举成员名称转换为指定枚举值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">枚举成员名称</param>
            <returns>object</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GeMembertValues``1">
            <summary>
            获取指定枚举类型的所有值列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>Array</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetMemberNames``1">
            <summary>
            获取指定枚举类型的所有名称列表
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>string[]</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetMemberValue``1(System.String)">
            <summary>
            获取指定枚举成员名称的值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="memberName">枚举成员名称</param>
            <returns>object</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetMemberName``1(System.Object)">
            <summary>
            获取指定枚举成员值的枚举名称
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举成员值</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.GetMemberName(System.Type,System.Object)">
            <summary>
            获取指定枚举成员名称的值
            </summary>
            <param name="type">枚举类型</param>
            <param name="value">枚举成员的值</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.IsDefined``1(System.String)">
            <summary>
            获取枚举中是否包含指定的枚举成员名称
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="strmember">枚举成员名或成员值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lib4Net.EnumUtility.IsDefined(System.Type,System.String)">
            <summary>
            获取枚举中是否包含指定的枚举成员名称
            </summary>
            <typeparam name="type">枚举类型</typeparam>
            <param name="strmember">枚举成员名或成员值</param>
            <returns>bool</returns>
        </member>
        <member name="T:Lib4Net.Security.PemRSA">
            <summary>
            基于openssl生成的rsa私钥，私钥的加解密
            通过openssl生成密钥对方法：
            1.genrsa -out rsa_private_key.pem 1024
            2.pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt
            3.rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem
            </summary>
        </member>
        <member name="M:Lib4Net.Security.PemRSA.ConvertFromPemPublicKey(System.String)">
            <summary>
            将pem格式公钥转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem公钥内容</param>
            <returns>RSAParameters</returns>
        </member>
        <member name="M:Lib4Net.Security.PemRSA.ConvertFromPemPrivateKey(System.String)">
            <summary>
            将pem格式私钥转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem私钥内容</param>
            <returns>RSAParamenters</returns>
        </member>
        <member name="M:Lib4Net.Security.PemRSA.Encrypt(System.String,System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="pubKey">公钥</param>
            <param name="content">加密原文</param>
            <param name="encoding">编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.PemRSA.Decrypt(System.String,System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="priKey">私钥</param>
            <param name="content">密文</param>
            <param name="encoding">编码</param>
            <returns>string</returns>
        </member>
        <member name="M:Lib4Net.Security.PemRSA.Verify(System.String,System.String,System.String,System.String)">
            <summary>
            验证签名是否正确
            </summary>
            <param name="publicKey">公钥</param>
            <param name="privateKey">私钥</param>
            <param name="content">原文</param>
            <param name="encoding">密文编码方式</param>
            <returns>bool</returns>
        </member>
        <member name="P:Lib4Net.ORM.Template.Context.Entity">
            <summary>
            获取或设置实体信息
            </summary>
        </member>
        <member name="P:Lib4Net.ORM.Template.Context.DbPrefix">
            <summary>
            获取或设置数据库前缀
            </summary>
        </member>
        <member name="T:Lib4Net.ORM.ODMapsFactory">
            <summary>
            对象数据库映射管理
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.ODMapsFactory.GetObjectDataBaseMap``1">
            <summary>
            获取指定类型的数据库映射信息,已缓存数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ODMapsFactory.GetXmlTemplate(System.String,System.String)">
            <summary>
            获取XML模板信息
            </summary>
            <param name="fullName">模板文件路径名,不包含.xml后缀</param>
            <param name="templateName">模板名称</param>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.ORM.ODMapsFactory.GetObjectDataBaseMap(System.Type)">
            <summary>
            获取指定类型的数据库映射信息,已缓存数据
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:Lib4Net.ORM.Data.ScalarExecutedArgs">
            <summary>
            获取条数执行后参数
            </summary>
        </member>
        <member name="M:Lib4Net.ORM.Data.ScalarExecutedArgs.#ctor(Lib4Net.ORM.Data.SqlCommandData,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="obj">SQL操作参数</param>
            <param name="obj">条数</param>
        </member>
        <member name="P:Lib4Net.ORM.Data.ScalarExecutedArgs.Data">
            <summary>
            总条数
            </summary>
        </member>
        <member name="T:Lib4Net.TimeWatch">
            <summary>
            提供一组方法和属性，可用于准确地测量运行时间。
            </summary>
        </member>
        <member name="M:Lib4Net.TimeWatch.Start">
            <summary>
            开始或继续测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:Lib4Net.TimeWatch.Stop">
            <summary>
            停止测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:Lib4Net.TimeWatch.Elapsed">
            <summary>
            获取当前实例测量得出的总运行时间（以毫秒为单位）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lib4Net.TimeWatch.Reset">
            <summary>
            停止时间间隔测量，并将运行时间重置为零。
            </summary>
        </member>
    </members>
</doc>
